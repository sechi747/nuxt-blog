__NUXT_JSONP__("/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0", (function(a,b,c,d){c[0]={date:2022,articles:[{attributes:{title:"读书笔记：《你不知道的 JavaScript》(1)",date:b,updated:b,categories:["技术"],tags:[a,d]},html:"\u003Cp\u003E本篇文章总结自《你不知道的 JavaScript (上卷)》的第一章，是基于书籍内容和我个人的理解总结的，所以可能会有一些纰漏，请酌情阅读（虽然可能只有我自己才会读）。\u003C\u002Fp\u003E\n\u003Ch1\u003E作用域是什么\u003C\u002Fh1\u003E\n\u003Ch2\u003E编译原理\u003C\u002Fh2\u003E\n\u003Cp\u003EJS 代码编译有三个步骤：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E分词\u002F词法分析（Tokenizing\u002FLexing）\u003Cbr\u003E\n这个过程会将代码分解为多个词法单元（token）。比如 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 就会被分解为：\u003Ccode\u003Evar\u003C\u002Fcode\u003E、\u003Ccode\u003Ea\u003C\u002Fcode\u003E、\u003Ccode\u003E=\u003C\u002Fcode\u003E、\u003Ccode\u003E1\u003C\u002Fcode\u003E、\u003Ccode\u003E;\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E解析\u002F词法分析（Parsing）\u003Cbr\u003E\n这个过程会将词法单元流（数组）转换为抽象语法树（Abstract Syntax Tree, AST）。比如 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 会变成下面这样子：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Program\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E11\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"body\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"VariableDeclaration\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"declarations\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"VariableDeclarator\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"id\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Identifier\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"name\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"a\"\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"init\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Literal\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"value\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"raw\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"1\"\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"kind\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"var\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"sourceType\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"module\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E代码生成\u003Cbr\u003E\n这个过程会将 AST 转换为可执行代码。抛开具体细节，其实就是将 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 的 AST 转化为一组机器指令（字节码 =&gt; 机器码），用来创建一个叫作 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的变量（包括分配内容等），并将一个值存储在 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 中。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EJS 代码的编译大部分时候都是发生在代码执行前。\u003C\u002Fp\u003E\n\u003Ch2\u003E作用域\u003C\u002Fh2\u003E\n\u003Cp\u003E首先介绍三个概念：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E引擎\u003Cbr\u003E\n负责整个 JavaScript 程序的编译及执行过程\u003C\u002Fli\u003E\n\u003Cli\u003E编译器\u003Cbr\u003E\n负责词法分析、语法分析及代码生成等工作\u003C\u002Fli\u003E\n\u003Cli\u003E作用域\u003Cbr\u003E\n负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并且管理当前执行代码对这些标识符的访问权限\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E以 \u003Ccode\u003Evar a = 1\u003C\u002Fcode\u003E 为例，编译器与作用域的交互如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E遇到 \u003Ccode\u003Evar a\u003C\u002Fcode\u003E 时，编译器会询问作用域\u003Cstrong\u003E是否已经有一个该名称的变量存在于同一个作用域的集合中\u003C\u002Fstrong\u003E。如果是，那么编译器会忽略该变量的声明，然后继续编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E接下来编译器会为引擎生成运行时所需的代码，这些代码用来处理 \u003Ccode\u003Ea = 2\u003C\u002Fcode\u003E 的赋值操作。引擎运行时会先询问作用域，当前的作用域集合中是否存在一个名为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的变量。如果存在，引擎会使用这个变量。如果不存在，引擎会继续查找变量\u003C\u002Fli\u003E\n\u003Cli\u003E如果引擎最终找到了 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 变量，则会将 \u003Ccode\u003E2\u003C\u002Fcode\u003E 赋值给它；如果没找到，则会抛出一个异常\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003E引擎的两种查询方式\u003C\u002Fh3\u003E\n\u003Cp\u003E引擎在寻找变量时有两种查询方式：\u003Ccode\u003ELHS\u003C\u002Fcode\u003E(Left Hand Side) 和 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E(Right Hand Side)\u003C\u002Fp\u003E\n\u003Cp\u003E可以\u003Cstrong\u003E笼统地\u003C\u002Fstrong\u003E认为当变量出现在赋值操作的左侧时会进行 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 查询，出现在右侧时进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 查询。\u003C\u002Fp\u003E\n\u003Cp\u003E例如 \u003Ccode\u003Econsole.log(a)\u003C\u002Fcode\u003E 对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的引用就是一个 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，因为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 并没有被赋予任何值。相应的，需要去查找并取得 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的值，这样才能将值传递给 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E例如 \u003Ccode\u003Ea = 2\u003C\u002Fcode\u003E 对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的引用是一个 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 引用，因为我们并不关心当前 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的值是什么，只想为 \u003Ccode\u003E= 2\u003C\u002Fcode\u003E 这个赋值操作找到一个目标\u003C\u002Fp\u003E\n\u003Cp\u003E综上所述，可以将 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 理解为“赋值操作的目标是谁”，将 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 理解为“谁是操作赋值的源头”。也就是说 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 是\u003Cstrong\u003E赋值操作\u003C\u002Fstrong\u003E，\u003Ccode\u003ERHS\u003C\u002Fcode\u003E 是\u003Cstrong\u003E寻值操作\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E下面的代码既包含 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 也包含 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E首先 \u003Ccode\u003Efoo(2)\u003C\u002Fcode\u003E 的函数调用需要对 foo 进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，也就是去寻找 foo 的值。找 foo 的值后函数开始执行，当 \u003Ccode\u003E2\u003C\u002Fcode\u003E 被当作参数传递给 \u003Ccode\u003Efoo(...)\u003C\u002Fcode\u003E 时，\u003Ccode\u003E2\u003C\u002Fcode\u003E 被赋值给了参数 \u003Ccode\u003Ea\u003C\u002Fcode\u003E，因此需要进行 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 查询。这里还有对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 进行的 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，并将得到值传给了 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E。而 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E 本身也需要一个引用才能执行，因此会对 \u003Ccode\u003Econsole\u003C\u002Fcode\u003E 对象进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 查询，并检查得到的值是否有一个叫 \u003Ccode\u003Elog\u003C\u002Fcode\u003E 的方法。最后，假设 \u003Ccode\u003Elog(...)\u003C\u002Fcode\u003E 函数可以接收参数，则在将 \u003Ccode\u003E2\u003C\u002Fcode\u003E 赋值给其第一个参数前，这个参数需要进行一次 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 引用查询。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220411105712261.png\" alt=\"image-20220411105712261\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E作用域嵌套\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 4\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E上述代码中，对 \u003Ccode\u003Eb\u003C\u002Fcode\u003E 进行的 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用无法在函数 \u003Ccode\u003Efoo\u003C\u002Fcode\u003E 内部完成，但可以在上一级作用域中完成。遍历嵌套作用域链的规则很简单：引擎会从当前的\u003Cstrong\u003E执行作用域\u003C\u002Fstrong\u003E开始查找变量，如果找不到，就去上一级继续查找。当抵达最外层的\u003Cstrong\u003E全局作用域\u003C\u002Fstrong\u003E时，无论找到还是没找到，查找过程都会停止。\u003C\u002Fp\u003E\n\u003Ch3\u003E异常\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F Uncaught ReferenceError: b is not defined \u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Econsole.log(a + b)\u003C\u002Fcode\u003E 时，对 b 进行 RHS 查询是无法找到该变量的，因为它未声明，引擎会抛出 \u003Ccode\u003EReferenceError\u003C\u002Fcode\u003E 异常。\u003C\u002Fp\u003E\n\u003Cp\u003E但如果执行的是 LHS 查询，且程序运行在“非严格模式”下，如果在全局作用域中也无法找到目标变量，则会在全局作用域下隐式地创建一个具有该名称的变量，并将其返回给引擎，比如下面的代码是可以正常运行的：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 4\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E但如果是“严格模式”下运行程序，则也会抛出 \u003Ccode\u003EReferenceError\u003C\u002Fcode\u003E 异常：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token string\"\u003E'use strict'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F Uncaught ReferenceError: b is not defined\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E如果 RHS 查询找到了一个变量，但你尝试对这个变量的值进行不合理的操作，比如试图对一个字符串的值进行函数调用，那么引擎会抛出 \u003Ccode\u003ETypeError\u003C\u002Fcode\u003E 异常。\u003C\u002Fp\u003E\n",date:b,path:"\u002Fposts\u002F20220411-《你不知道的JavaScript》(1)\u002F"}]};return {data:[{archives:c,keyword:a}],fetch:{"data-v-28ad35dd:0":{tags:["起始","Linux","Nuxt","网站部署","图床",d,"生活",a,"Flutter","Dart","强说愁","Vue"],archives:c,keyword:a}},mutations:void 0}}("读书笔记","2022\u002F04\u002F11 11:30:53",Array(1),"Vanilla JS")));