__NUXT_JSONP__("/tags/Linux", (function(a,b,c,d,e){b[0]={date:2022,articles:[{attributes:{title:"从零开始在 Ubuntu 上部署 Nuxt 项目",date:c,updated:"2022\u002F03\u002F28 10:05:00",categories:["技术"],tags:[a,d,e]},html:"\u003Ch2\u003E前置工作\u003C\u002Fh2\u003E\n\u003Cp\u003E部署使用的 Ubuntu 版本：Ubuntu 20.04.4 LTS (GNU\u002FLinux 5.4.0-96-generic x86_64)\u003C\u002Fp\u003E\n\u003Cp\u003E整个部署过程我都是使用 root 用户进行操作，所以不会有权限问题，但如果你是使用其他用户进行操作，则需要注意权限问题，适时给命令加上 \u003Ccode\u003Esudo\u003C\u002Fcode\u003E 前缀\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 npm\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install npm\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm config set registry https:\u002F\u002Fregistry.npmmirror.com\u003C\u002Fcode\u003E 配置国内 npm 镜像\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 n\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g n\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E使用 n 安装 node\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003En lts\u003C\u002Fcode\u003E  安装 node 的长期支持版\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En 14.17.6\u003C\u002Fcode\u003E 安装特定版本的 node（此处仅做演示，请根据实际需求安装特定的 node 版本）\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En\u003C\u002Fcode\u003E 切换当前 node 版本，切换的同时 npm 版本也会改变。可以通过 \u003Ccode\u003Enode -v\u003C\u002Fcode\u003E 查看当前 node 版本\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 pm2\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g pm2\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E安装并配置 git\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install git\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.name \u003Cspan class=\"token string\"\u003E'用户名'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.email \u003Cspan class=\"token string\"\u003E'邮箱'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Essh-keygen -C '邮箱' -t rsa\u003C\u002Fcode\u003E  默认生成目录为 \u003Ccode\u003E~\u002F.ssh\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Ecat ~\u002F.ssh\u002Fid_rsa.pub\u003C\u002Fcode\u003E 复制 ssh key 并将其加入 github 的设置中\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E单独说一下我遇到的问题：在进行完以上步骤后，我尝试使用 \u003Ccode\u003Egit clone git@github.com:sechi747\u002Fnuxt-blog.git \u003C\u002Fcode\u003E 命令拉取我的个人仓库，结果失败了。错误信息如下：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Ekex_exchange_identification: read: Connection reset by peer\nfatal: Could not \u003Cspan class=\"token builtin class-name\"\u003Eread\u003C\u002Fspan\u003E from remote repository\n\nPlease \u003Cspan class=\"token function\"\u003Emake\u003C\u002Fspan\u003E sure you have the correct access rights\nand the repository exists\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E尝试了许多种方法进行解决，包括但不限于：重装系统，重新生成 ssh key，根据 github 官方的指南一步一步进行操作等都没有起作用。下面是我最终的解决方法。\u003C\u002Fp\u003E\n\u003Cp\u003E进入到 \u003Ccode\u003E.ssh\u003C\u002Fcode\u003E 文件夹下，新建 \u003Ccode\u003Econfig\u003C\u002Fcode\u003E 文件（如果有就不用建了，直接修改就可以），添加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003EHost github.com\nHostname ssh.github.com\nPort \u003Cspan class=\"token number\"\u003E443\u003C\u002Fspan\u003E\nUser \u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后再进行 \u003Ccode\u003Egit\u003C\u002Fcode\u003E 操作就不会有问题了。造成这个现象的原因暂时不清楚，等有空再细查吧。\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 Nginx\u003C\u002Fh4\u003E\n\u003Cp\u003E此处安装的 Nginx 版本为：nginx\u002F1.18.0 (Ubuntu)\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install nginx\u003C\u002Fcode\u003E 安装 Nginx\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eservice nginx start\u003C\u002Fcode\u003E 启动 Nginx\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 MySQL\u003C\u002Fh4\u003E\n\u003Cp\u003E其实我的博客项目并不涉及数据库，但是为了熟悉 Linux 操作还是装上吧~\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 MySQL 版本为：8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install mysql-server\u003C\u002Fcode\u003E 安装 MySQL\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl status mysql.service\u003C\u002Fcode\u003E 看一下有没有安装成功\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Emysql -u root -p\u003C\u002Fcode\u003E 因为安装时并没有要求设置密码，所以密码默认为空，直接敲回车就能进入控制台了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Euse mysql;\u003C\u002Fcode\u003E 切换到 mysql 数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ealter user 'root'@'localhost' identified with mysql_native_password by '密码';\u003C\u002Fcode\u003E  修改 root 账号的密码加密方式和密码，这样就可以在客户端使用密码连接数据库了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Egrant all on *.* to 'root'@'localhost';\u003C\u002Fcode\u003E 使外网可以访问到数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fmysql\u002Fmysql.conf.d\u002Fmysqld.cnf\u003C\u002Fcode\u003E 将里面的\u003Ccode\u003Ebind-address\u003C\u002Fcode\u003E 和 \u003Ccode\u003Emysqlx-bind-address\u003C\u002Fcode\u003E 修改为 \u003Ccode\u003E0.0.0.0\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl restart mysql\u003C\u002Fcode\u003E 重启 MySQL 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 Docker\u003C\u002Fh4\u003E\n\u003Cp\u003Edocker 肯定是会用到的，虽然我现在没用到~ 这里直接把官网的安装教程搬过来\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 Docker 版本为：20.10.14, build a224086\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E安装一些必要的包\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E ca-certificates \u003Cspan class=\"token function\"\u003Ecurl\u003C\u002Fspan\u003E gnupg lsb-release\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E\n\u003Cp\u003E添加 docker 官方的 GPG 密钥\u003Cbr\u003E\n\u003Ccode\u003Ecurl -fsSL https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu\u002Fgpg | sudo gpg --dearmor -o \u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E设置稳定版的 docker 仓库\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E\\\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string\"\u003E\"deb [arch=\u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Edpkg --print-architecture\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E signed-by=\u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg] https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu \\\n  \u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Elsb_release -cs\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E stable\"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E|\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Esudo\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Etee\u003C\u002Fspan\u003E \u002Fetc\u002Fapt\u002Fsources.list.d\u002Fdocker.list \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u002Fdev\u002Fnull\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E安装 docker 引擎\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E docker-ce docker-ce-cli containerd.io\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E验证安装是否成功\u003Cbr\u003E\n\u003Ccode\u003Edocker run hello-world\u003C\u002Fcode\u003E\u003Cbr\u003E\n由于我们本地是没有 hello-world 这个镜像的，所以会去服务器 pull，如果发现成功运行了 hello-world 镜像，出现了 Hello from Docker 的，那么就算是安装成功啦！\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E配置 docker 镜像加速源\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Evim\u003C\u002Fspan\u003E \u002Fetc\u002Fdocker\u002Fdaemon.json\n\n\u003Cspan class=\"token comment\"\u003E#在文件中添加以下内容\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n   \u003Cspan class=\"token string\"\u003E\"registry-mirrors\"\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin class-name\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n       \u003Cspan class=\"token string\"\u003E\"https:\u002F\u002Fmirror.ccs.tencentyun.com\"\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E#添加完成后执行下面的命令重启 docker 服务器\u003C\u002Fspan\u003E\nsystemctl restart \u003Cspan class=\"token function\"\u003Edocker\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E由于 DockerHub 部署在国外，如果直接使用 \u003Ccode\u003Edocker pull\u003C\u002Fcode\u003E 拉取镜像速度会比较慢，所以推荐配置一下 Docker镜像加速源，这里我选择的是腾讯云提供的加速源。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003E项目部署\u003C\u002Fh2\u003E\n\u003Cp\u003E经过了上面的一系列准备，终于可以开始正式部署啦！\u003C\u002Fp\u003E\n\u003Cp\u003Enuxt 官网提供了两种部署方式，一种是使用 \u003Ccode\u003Enpm run build &amp; npm run start\u003C\u002Fcode\u003E 进行 ssr 部署，另一种是使用 \u003Ccode\u003Enpm run generate \u003C\u002Fcode\u003E 进行静态应用部署，这里我选择的是 ssr 部署。\u003C\u002Fp\u003E\n\u003Cp\u003E在部署之前，我们需要在项目中增加一些配置。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E在 \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E 中增加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E  \u003Cspan class=\"token literal-property property\"\u003Eserver\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ehost\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'0.0.0.0'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eport\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'7070'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 项目运行的端口号。注意：请写一个不容易被占用的端口号\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E在项目的根目录新建一个文件用于 pm2 配置： \u003Ccode\u003Eecosystem.config.js\u003C\u002Fcode\u003E 并在里面添加以下内容：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Emodule\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eexports\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Eapps\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'nuxt-blog'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F pm2 应用进程的名称\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eexec_mode\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'cluster'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动模式，这里选择集群\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Einstances\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'max'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动实例个数，这里选择最大，也可以填具体的数量\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Escript\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'.\u002Fnode_modules\u002Fnuxt\u002Fbin\u002Fnuxt.js'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 启动脚本路径\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eargs\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'start'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 传递给脚本的参数\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\".nuxt\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 .nuxt 文件夹，当里面内容更新时会自动重启应用\u003C\u002Fspan\u003E\n  \t  \u003Cspan class=\"token literal-property property\"\u003Ewatch_delay\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1500\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听延迟\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E接下来你需要把自己的项目上传到 github 上，这一步就不再赘述。\u003C\u002Fp\u003E\n\u003Cp\u003E项目上传成功后，我们切回到服务器的终端并进行以下操作：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E首先我们要通过 \u003Ccode\u003Egit clone\u003C\u002Fcode\u003E 命令把项目放到服务器端\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token comment\"\u003E#这里我选择在用户目录下新建一个 www 文件夹，并把项目放到里面，文件位置可以自行更改\u003C\u002Fspan\u003E\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E ~\n\u003Cspan class=\"token function\"\u003Emkdir\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E clone git@github.com:sechi747\u002Fnuxt-blog.git\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E项目拉下来之后，需要使用 npm 安装依赖并打包\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E nuxt-blog\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E i\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E run build\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E打包完成后，我们就可以使用 pm2 启动项目了\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Epm2 start\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E我们可以通过 \u003Ccode\u003Epm2 ls\u003C\u002Fcode\u003E 查看当前正在运行的应用状态， \u003Ccode\u003Epm2 logs\u003C\u002Fcode\u003E 查看日志\u003C\u002Fp\u003E\n\u003Cp\u003E最后，我们只需要配置一下 Nginx 就可以完成部署啦！\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fnginx\u002Fnginx.conf\u003C\u002Fcode\u003E 编辑 Nginx 配置\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Enginx -s reload \u003C\u002Fcode\u003E 在 Nginx 目录下运行此命令，重新启动 Nginx 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E贴出我自己的配置供参考：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Euser www-data\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\nworker_processes auto\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\npid \u002Frun\u002Fnginx.pid\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\ninclude \u002Fetc\u002Fnginx\u002Fmodules-enabled\u002F*.conf\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\nevents \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        worker_connections \u003Cspan class=\"token number\"\u003E768\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# multi_accept on;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\nhttp \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Basic Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        sendfile on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nopush on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nodelay on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        keepalive_timeout \u003Cspan class=\"token number\"\u003E65\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        types_hash_max_size \u003Cspan class=\"token number\"\u003E2048\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_tokens off;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# server_names_hash_bucket_size 64;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_name_in_redirect off;\u003C\u002Fspan\u003E\n\n        include \u002Fetc\u002Fnginx\u002Fmime.types\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        default_type application\u002Foctet-stream\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# SSL Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# Dropping SSLv3, ref: POODLE\u003C\u002Fspan\u003E\n        ssl_prefer_server_ciphers on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Logging Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        access_log \u002Fvar\u002Flog\u002Fnginx\u002Faccess.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        error_log \u002Fvar\u002Flog\u002Fnginx\u002Ferror.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Gzip Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# gzip_vary on;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_proxied any;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_comp_level 6;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_buffers 16 8k;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_http_version 1.1;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_types text\u002Fplain text\u002Fcss application\u002Fjson application\u002Fjavascript text\u002Fxml application\u002Fxml application\u002Fxml+rss text\u002Fjavascript;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Virtual Host Configs\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\t\t\n\t\t\u003Cspan class=\"token comment\"\u003E#注意！下面这两行要注释掉，否则80端口会一直被Nginx占用，导致下面自定义的sever配置不生效。\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fconf.d\u002F*.conf;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fsites-enabled\u002F*;\u003C\u002Fspan\u003E\n\n        map \u003Cspan class=\"token variable\"\u003E$sent_http_content_type\u003C\u002Fspan\u003E \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml\"\u003C\u002Fspan\u003E                 epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml; charset=utf-8\"\u003C\u002Fspan\u003E  epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                default                     off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        upstream webserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                server \u003Cspan class=\"token number\"\u003E127.0\u003C\u002Fspan\u003E.0.1:7070\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#项目的启动地址及端口号\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        server \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                listen          \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E             \u003Cspan class=\"token comment\"\u003E# 监听的端口\u003C\u002Fspan\u003E\n                server_name     http:\u002F\u002Fplantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E    \u003Cspan class=\"token comment\"\u003E# 域名\u003C\u002Fspan\u003E\n\n                \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E            on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_types      text\u002Fplain application\u002Fxml text\u002Fcss application\u002Fjavascript\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_min_length \u003Cspan class=\"token number\"\u003E1000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                location \u002F \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                        expires \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                        proxy_redirect                      off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header Host               \u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Real-IP          \u003Cspan class=\"token variable\"\u003E$remote_addr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-For    \u003Cspan class=\"token variable\"\u003E$proxy_add_x_forwarded_for\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-Proto  \u003Cspan class=\"token variable\"\u003E$scheme\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_read_timeout          1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_connect_timeout       1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_pass         http:\u002F\u002Fwebserver\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# 这里要填入上面的upstream\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成以上所有步骤后，打开浏览器，输入域名，你就可以看到自己的网站啦~\u003C\u002Fp\u003E\n\u003Cp\u003E虽然已经可以成功访问到网站了，但还是存在以下两个问题：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E网站使用的是 http 协议而不是 https 协议\u003C\u002Fli\u003E\n\u003Cli\u003E更新代码后每次都要手动在服务器端拉取代码并打包\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E后续有时间的话会把这两个坑给填上。\u003C\u002Fp\u003E\n",date:c,path:"\u002Fposts\u002F20220324-Ubuntu部署nuxt项目\u002F"}]};return {data:[{archives:b,keyword:a}],fetch:{"data-v-28ad35dd:0":{tags:["起始",a,d,e,"图床","Vanilla JS","生活","读书笔记","Flutter","Dart","强说愁","Vue"],archives:b,keyword:a}},mutations:void 0}}("Linux",Array(1),"2022\u002F03\u002F24 15:58:00","Nuxt","网站部署")));