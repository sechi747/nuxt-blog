__NUXT_JSONP__("/categories/%E6%8A%80%E6%9C%AF", (function(a,b,c,d,e,f,g,h,i,j,k,l,m){return {data:[{archives:[{date:2022,articles:[{attributes:{title:"关于 Vue3 中的 EffectScope",date:b,updated:b,categories:[a],tags:["Vue"]},html:"\u003Cp\u003E时隔三个月后的第一篇博客，希望能终止我的颓势，让我能再向上爬一些。\u003C\u002Fp\u003E\n\u003Cp\u003E最近在写公司业务的时候使用了 \u003Ccode\u003Evueuse\u003C\u002Fcode\u003E 中的 \u003Ccode\u003EcreateSharedComposable\u003C\u002Fcode\u003E 这个方法，用起来十分的顺手。于是乎找到了这个方法源码来读一读，然后发现读不懂...整个方法的实现不过20行代码，看起来十分简洁。其中最核心的部分就是引用的 Vue3.2 的新特性：\u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E 。去翻了翻 Vue 文档，发现这个特性居然 antfu 大佬亲自提出来的，属于是自产自销了。\u003C\u002Fp\u003E\n\u003Cp\u003E简单读了一下 \u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E 的 RFC（主要是想深入读也没那个能力XD），终于是对这个方法有了一点头绪。\u003C\u002Fp\u003E\n\u003Cp\u003E首先看一下 \u003Ccode\u003EcreateSharedComposable\u003C\u002Fcode\u003E 方法的实现：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-typescript\"\u003E\u003Ccode class=\"language-typescript\"\u003E\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E EffectScope \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'vue-demi'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E effectScope \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'vue-demi'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E tryOnScopeDispose \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'..\u002FtryOnScopeDispose'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token doc-comment comment\"\u003E\u002F**\n * Make a composable function usable with multiple Vue instances.\n *\n * \u003Cspan class=\"token keyword\"\u003E@see\u003C\u002Fspan\u003E https:\u002F\u002Fvueuse.org\u002FcreateSharedComposable\n *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E createSharedComposable\u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003EFn \u003Cspan class=\"token keyword\"\u003Eextends\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E...\u003C\u002Fspan\u003Eargs\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eany\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eany\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecomposable\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E Fn\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E Fn \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E subscribers \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E state\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E ReturnType\u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003EFn\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E|\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eundefined\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E scope\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E EffectScope \u003Cspan class=\"token operator\"\u003E|\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eundefined\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token function-variable function\"\u003Edispose\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    subscribers \u003Cspan class=\"token operator\"\u003E-=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Escope \u003Cspan class=\"token operator\"\u003E&amp;&amp;\u003C\u002Fspan\u003E subscribers \u003Cspan class=\"token operator\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      scope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n      state \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eundefined\u003C\u002Fspan\u003E\n      scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eundefined\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003EFn\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E...\u003C\u002Fspan\u003Eargs\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    subscribers \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Estate\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n      state \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E scope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomposable\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E...\u003C\u002Fspan\u003Eargs\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EtryOnScopeDispose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edispose\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E state\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E方法中定义了三个变量：\u003Ccode\u003Esubscribers\u003C\u002Fcode\u003E 代表使用这个 composable 的组件数量，\u003Ccode\u003Estate\u003C\u002Fcode\u003E 是被传入的方法的返回值， \u003Ccode\u003Escope\u003C\u002Fcode\u003E 则是上面提到的 \u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E该方法接收一个函数作为参数，返回值也是一个函数。首先将 \u003Ccode\u003Esubscribers ++\u003C\u002Fcode\u003E ，然后去判断当前是否已经存在了 \u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E， 如果存在的话那就只绑定一个解绑事件并返回 \u003Ccode\u003Estate\u003C\u002Fcode\u003E ，如果不存在的话，则创建一个 \u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E，并执行 \u003Ccode\u003Escope.run\u003C\u002Fcode\u003E 来获取传入的函数的返回值。\u003C\u002Fp\u003E\n\u003Cp\u003E然后就是对 \u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E 的相关概念讲解，此部分来自官方 RFC\u003C\u002Fp\u003E\n\u003Ch4\u003E出现的原因\u003C\u002Fh4\u003E\n\u003Cp\u003E在 Vue 的 setup 中，响应会在开始初始化的时候被收集，在实例被卸载的时候，响应就会自动的被取消追踪，这是一个很方便的特性。但是，当我们在组件外使用或者编写一个独立的包时，这会变得非常麻烦。当在单独的文件中，我们该如何停止 computed &amp; watch 的响应式依赖呢？\u003C\u002Fp\u003E\n\u003Cp\u003E在 Vue3.2 之前：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E disposables \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E counter \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E doubled \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomputed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E counter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ndisposables\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eeffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E stopWatch1 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EwatchEffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003Ecounter: \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Ecounter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ndisposables\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstopWatch1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E stopWatch2 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ndisposables\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstopWatch2\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E 实现：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F effect, computed, watch, watchEffect created inside the scope will be collected\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E doubled \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomputed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E counter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003EwatchEffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Count: '\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E doubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F to dispose all effects in the scope\u003C\u002Fspan\u003E\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E如何使用\u003C\u002Fh4\u003E\n\u003Cp\u003E一个 scope 可以执行一个 run 函数（接受一个函数作为参数，并返回该函数的返回值），并且捕获所有在该函数执行过程中创建的 effect ，包括可以创建 effect 的API，例如 \u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E , \u003Ccode\u003Ewatch\u003C\u002Fcode\u003E , \u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E :\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E doubled \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomputed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E counter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003EwatchEffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Count: '\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E doubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F the same scope can run multiple times\u003C\u002Fspan\u003E\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecounter\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F*...*\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E当调用 \u003Ccode\u003Escope.stop()\u003C\u002Fcode\u003E 时，所有被捕获的 effect 都会被取消，包括 Nested Scopes 也会被递归取消。\u003C\u002Fp\u003E\n\u003Cp\u003E嵌套 scope 也会被他们的父级 scope 收集。并且当父级 scope 销毁的时候，所有的后代 scope 也会被递归销毁。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E doubled \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomputed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E counter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F not need to get the stop handler, it will be collected by the outer scope\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003EwatchEffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Count: '\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E doubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F dispose all effects, including those in the nested scopes\u003C\u002Fspan\u003E\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EEffectScope\u003C\u002Fcode\u003E 接受一个参数可以在分离模式（detached mode）下创建。 Detached Scope不会被父级收集。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E nestedScope\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E parentScope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nparentScope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E doubled \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecomputed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E counter\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F with the detected flag,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F the scope will not be collected and disposed by the outer scope\u003C\u002Fspan\u003E\n  nestedScope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F* detached *\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  nestedScope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edoubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003EwatchEffect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Count: '\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E doubled\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F disposes all effects, but not `nestedScope`\u003C\u002Fspan\u003E\nparentScope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F stop the nested scope only when appropriate\u003C\u002Fspan\u003E\nnestedScope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E全局钩子函数 \u003Ccode\u003EonScopeDispose\u003C\u002Fcode\u003E 提供了类似于 \u003Ccode\u003EonUnmounted\u003C\u002Fcode\u003E 的功能，不同的是它工作在 \u003Ccode\u003Escope\u003C\u002Fcode\u003E 中而不是当前实例。\u003C\u002Fp\u003E\n\u003Cp\u003E这使得 composable functions 可以通过他们的 \u003Ccode\u003Escope\u003C\u002Fcode\u003E 清除他们的副作用。\u003C\u002Fp\u003E\n\u003Cp\u003E由于 \u003Ccode\u003Esetup()\u003C\u002Fcode\u003E 默认会为当前实例创建一个 \u003Ccode\u003Escope\u003C\u002Fcode\u003E，所以当没有明确声明一个 \u003Ccode\u003Escope\u003C\u002Fcode\u003E 的时候，\u003Ccode\u003EonScopeDispose \u003C\u002Fcode\u003E等同于 \u003Ccode\u003EonUnmounted\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword module\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token imports\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E onScopeDispose \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword module\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'vue'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E scope \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EeffectScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003EonScopeDispose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'cleaned!'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nscope\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F logs 'cleaned!'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E通过 \u003Ccode\u003EgetCurrentScope()\u003C\u002Fcode\u003E 可以获取当前 scope\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword module\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token imports\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E getCurrentScope \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword module\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'vue'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token function\"\u003EgetCurrentScope\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F EffectScope | undefined\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",date:b,path:"\u002Fposts\u002F20220807-关于Vue3中的EffectScope\u002F"},{attributes:{title:"在 Dart 中 final 和 const 的不同点",date:c,updated:c,categories:[a],tags:["Dart"]},html:"\u003Cp\u003E学习 dart 的时候对两个关键字的使用比较迷惑，一个是 \u003Ccode\u003Efinal\u003C\u002Fcode\u003E，一个是 \u003Ccode\u003Econst\u003C\u002Fcode\u003E。查阅了一些资料后决定做一些简单的总结。\u003C\u002Fp\u003E\n\u003Ch2\u003E共同点\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Efinal\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 都是用来定义常量的关键字，它们有以下共同点：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E可以省略声明的类型\u003C\u002Fli\u003E\n\u003Cli\u003E初始化之后不可再次赋值\u003C\u002Fli\u003E\n\u003Cli\u003E不能和 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 同时使用\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Efinal\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 会直接在 IDE 中就报红\u003C\u002Fspan\u003E\na \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \nb \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003E不同点\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E虽然 \u003Ccode\u003Efinal\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 定义的常量在初始化后就不可以再被修改，但还是有细微的不同。常量的实质是指针不可修改，但是 \u003Ccode\u003Efinal\u003C\u002Fcode\u003E 定义的常量的“值”可以被修改，因为它只限定了指针不可修改，但并没有限定指针所指向的值不能修改。但是 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 定义的常量是真的不能修改。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Efinal\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\na\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F [4, 2, 3]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\nb\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F Unsupported operation: Cannot modify an unmodifiable list\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 多次定义一个常量，它们的值其实是一样的。这也算是 dart 做的一种优化。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F true\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E c \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E d \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E d\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F false\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Econst\u003C\u002Fcode\u003E 不仅可以定义变量（variable），还可以定义值（value）。也就是可以写在等号右边。而 \u003Ccode\u003Efinal\u003C\u002Fcode\u003E 则不可以。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\na\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E\u002F\u002F Unsupported operation: Cannot modify an unmodifiable list\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 虽然常量值不可以修改，但是被赋予常量值的变量的值是可以修改的。\u003C\u002Fspan\u003E\na \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E\u002F\u002F [3, 4]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Econst\u003C\u002Fcode\u003E 是编译时常量，必须在编译时就有一个确定的值。而 \u003Ccode\u003Efinal\u003C\u002Fcode\u003E 是运行时常量，他会在第一次使用时被初始化赋值。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ok\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E c \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F IDE 会报红\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E d \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EDateTime\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Enow\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F IDE 会报红\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E x \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efinal\u003C\u002Fspan\u003E y \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E x \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ok\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efinal\u003C\u002Fspan\u003E z \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EDateTime\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Enow\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ok\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E修饰常量构造函数时必须使用 \u003Ccode\u003Econst\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"language-dart\"\u003E\u003Ccode class=\"language-dart\"\u003E\u003Cspan class=\"token keyword\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EConstObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  a\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EConstObject\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F 使用常量构造函数时要用 final 修饰类的成员\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Efinal\u003C\u002Fspan\u003E value\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EConstObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Evalue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evalue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E纸上得来终觉浅。还是需要多敲几遍才能记得深刻~\u003C\u002Fp\u003E\n",date:c,path:"\u002Fposts\u002F20220418-dart中的final和const\u002F"},{attributes:{title:"执行上下文和执行栈",date:d,updated:d,categories:[a],tags:[e]},html:"\u003Cp\u003E其实这篇文章更像是个读书笔记，只不过掺杂了一点点个人理解。文章讨论的东西并不深入，但单纯用来理解概念也还够用。虽然实际开发中不会用到这些概念，但是可以为后面理解闭包等概念铺路。\u003C\u002Fp\u003E\n\u003Ch1\u003E执行上下文的概念\u003C\u002Fh1\u003E\n\u003Cp\u003E简而言之，执行上下文（Execution Context）是评估和执行 JavaScript 代码的环境的抽象概念。每当 JavaScript 代码在运行的时候，它都是在执行上下文中运行。它有三种类型：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E全局执行上下文：这是基础的上下文，任何不再函数内部的代码都在全局上下文中。它会执行两件事：① 创建一个全局的 \u003Ccode\u003EWindow\u003C\u002Fcode\u003E 对象。② 设置 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 的值等于这个全局对象。一个程序只能有一个全局上下文。\u003C\u002Fli\u003E\n\u003Cli\u003E函数执行上下文：每当函数被调用时都会给这个函数创建一个新的上下文。每个函数都有自己的执行上下文，它会在函数\u003Cstrong\u003E被调用时\u003C\u002Fstrong\u003E创建而不是被定义时创建。\u003C\u002Fli\u003E\n\u003Cli\u003EEval 函数执行上下文：执行在 \u003Ccode\u003Eeval\u003C\u002Fcode\u003E 函数内部的代码也会有属于自己的执行上下文。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch1\u003E执行栈的概念\u003C\u002Fh1\u003E\n\u003Cp\u003E执行栈（Execution Stack），在其它编程语言中也会被称为“调用栈”，是一种拥有 LIFO（Last In First Out）数据结构的栈，被用来存储代码运行时创建的所有\u003Cstrong\u003E执行上下文\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E在 JS 引擎执行代码时，它会首先创建一个全局执行上下文并压入执行栈。每当调用一个函数时，它就会为该函数创建一个新的执行上下文并压入栈底。\u003C\u002Fp\u003E\n\u003Cp\u003EJS 引擎会执行那些上下文位于栈顶的函数，当该函数执行完毕时，执行上下文会从栈中弹出，然后会再次重复上述动作，直到所有函数执行完毕。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'Hello World!'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efirst\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Inside first function'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Esecond\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Again inside first function'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Esecond\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Inside second function'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token function\"\u003Efirst\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Inside Global Execution Context'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220414155143708.png\" alt=\"image-20220414155143708\"\u003E\u003C\u002Fp\u003E\n\u003Ch1\u003E执行上下文是怎么被创建的？\u003C\u002Fh1\u003E\n\u003Cp\u003E创建执行上下文有两个阶段：① \u003Cstrong\u003E创建阶段\u003C\u002Fstrong\u003E ② \u003Cstrong\u003E执行阶段\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E创建阶段\u003C\u002Fh2\u003E\n\u003Cp\u003E执行上下文在创建阶段会发生两件事：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003E词法环境\u003C\u002Fstrong\u003E组件被创建\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E变量环境\u003C\u002Fstrong\u003E组件被创建\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E在概念上可以表现为以下代码：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EExecutionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token maybe-class-name\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Eref\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E \u003Cspan class=\"token property-access\"\u003Eto\u003C\u002Fspan\u003E \u003Cspan class=\"token maybe-class-name\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E memory\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token maybe-class-name\"\u003EVariableEnvironment\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Eref\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E \u003Cspan class=\"token property-access\"\u003Eto\u003C\u002Fspan\u003E \u003Cspan class=\"token maybe-class-name\"\u003EVariableEnvironment\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E  memory\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E词法环境\u003C\u002Fh3\u003E\n\u003Cp\u003EES6 的文档中把词法环境定义为：\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E词法环境\u003C\u002Fstrong\u003E是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义\u003Cstrong\u003E标识符\u003C\u002Fstrong\u003E和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用\u003Cstrong\u003E外部\u003C\u002Fstrong\u003E词法环境的空值组成。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E简单来讲\u003Cstrong\u003E词法环境\u003C\u002Fstrong\u003E是一种持有\u003Cstrong\u003E标识符——变量映射\u003C\u002Fstrong\u003E的结构。\u003Cstrong\u003E标识符\u003C\u002Fstrong\u003E就是指变量\u002F函数的名字，而\u003Cstrong\u003E变量\u003C\u002Fstrong\u003E则是对实际对象（也包括函数和数组）或原始数据的引用。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E40\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'bar'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E上面的代码的词法环境大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E40\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Eref\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E \u003Cspan class=\"token property-access\"\u003Eto\u003C\u002Fspan\u003E foo \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E每个词法环境有三个组件：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E环境记录器\u003C\u002Fli\u003E\n\u003Cli\u003E外部环境的引用\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ethis\u003C\u002Fcode\u003E 绑定\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E环境记录器\u003C\u002Fh4\u003E\n\u003Cp\u003E环境记录器是词法环境内部\u003Cstrong\u003E存储变量和函数声明\u003C\u002Fstrong\u003E的地方。\u003C\u002Fp\u003E\n\u003Cp\u003E环境记录器具有两种类型：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003E声明式环境记录器\u003C\u002Fstrong\u003E——函数的词法环境会包含一个声明式环境记录器。用来存储变量和函数声明。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E对象环境记录器\u003C\u002Fstrong\u003E——全局代码的词法环境会包含一个对象环境记录器。除了变量和函数声明，对象环境记录器还会存储一个全局绑定对象（在浏览器中也就是 Window 对象）。所以对于每个绑定对象的属性（如果是在浏览器中，会包含一些浏览器提供的属性和方法，如BOM等）都会在记录器中创建一个新的条目（原文是 entry，不知道该怎么翻译）。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E注意：对于函数代码，环境记录器还会包含一个\u003Cstrong\u003E参数（arguments）对象\u003C\u002Fstrong\u003E，它包含了传递给该函数的“\u003Cstrong\u003E索引--参数映射\u003C\u002Fstrong\u003E”以及\u003Cstrong\u003E参数的长度\u003C\u002Fstrong\u003E。例如下面的函数的参数对象大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E c \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F argument object\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003EArguments\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E简而言之，\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E在\u003Cstrong\u003E全局环境\u003C\u002Fstrong\u003E中，环境记录器是对象环境记录器。\u003C\u002Fli\u003E\n\u003Cli\u003E在\u003Cstrong\u003E函数环境\u003C\u002Fstrong\u003E中，环境记录器是声明式环境记录器。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E外部环境的引用\u003C\u002Fh4\u003E\n\u003Cp\u003E外部环境的引用意味着一个词法环境可以访问到它外部的词法环境。也就是说如果 JS 引擎在当前的词法环境中无法找到一个变量，那么它可以去外部的词法环境中继续查找。我个人的理解是，这其实和作用域链很像，如果在当前作用域找不到一个变量的定义，那么会一层一层地向上查找，直到全局作用域。\u003C\u002Fp\u003E\n\u003Ch4\u003Ethis 绑定\u003C\u002Fh4\u003E\n\u003Cp\u003E这个组件就是用来进行 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 绑定的。\u003C\u002Fp\u003E\n\u003Cp\u003E如果是全局执行上下文的话， \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 会指向全局对象。（在浏览器中也就是 Window 对象）\u003C\u002Fp\u003E\n\u003Cp\u003E如果是函数执行上下文的话，\u003Ccode\u003Ethis\u003C\u002Fcode\u003E 的值会取决于函数是如何被调用的（此处不包含\u003Cstrong\u003E箭头函数\u003C\u002Fstrong\u003E，箭头函数的 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 指向取决于函数是在哪里被定义的）。如果它是被一个引用对象调用，那么 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 会被设置为那个对象，否则 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 的值会被设置为全局对象。（严格模式下则是 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E）以下面代码为例：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E person \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'peter'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003EbirthYear\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1994\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function-variable function\"\u003EcalcAge\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2018\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EbirthYear\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\nperson\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EcalcAge\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 'this' refers to 'person', because 'calcAge' was called with 'person' object reference\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E calculateAge \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E person\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EcalcAge\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EcalculateAge\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 'this' refers to the global window object, because no object reference was given\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E抽象地讲，词法环境的伪代码大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Object\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Eglobal object\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token maybe-class-name\"\u003EFunctionExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Declarative\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E or outer \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E environment reference\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Edepends on how \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E is called\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E变量环境\u003C\u002Fh3\u003E\n\u003Cp\u003E变量环境其实也是一个词法环境，它的环境记录器持有\u003Cstrong\u003E变量声明语句\u003C\u002Fstrong\u003E在执行上下文中创建的绑定关系。\u003C\u002Fp\u003E\n\u003Cp\u003E所以变量环境有着词法环境的所有属性和组件。\u003C\u002Fp\u003E\n\u003Cp\u003E在 ES6 中，词法环境和变量环境的唯一区别就是：词法环境会存储所有由 \u003Ccode\u003Elet\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 定义的变量绑定和函数声明。而变量环境只存储由 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 定义的变量绑定。\u003C\u002Fp\u003E\n\u003Ch2\u003E执行阶段\u003C\u002Fh2\u003E\n\u003Cp\u003E在执行阶段，完成对所有这些变量的分配后并最终执行代码。\u003C\u002Fp\u003E\n\u003Ch2\u003E例子\u003C\u002Fh2\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ee\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E f\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n \u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E g \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n \u003Cspan class=\"token keyword control-flow\"\u003Ereturn\u003C\u002Fspan\u003E e \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E f \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E g\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\nc \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E当上面的代码被执行时，JS 引擎会创建一个全局执行上下文来执行全局代码。在创建阶段时全局执行上下文大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Object\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E uninitialized \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E uninitialized \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E func \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003EVariableEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Object\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在执行阶段时全局执行上下文大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Object\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E func \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003EVariableEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Object\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E当代码执行到 \u003Ccode\u003Emultiply(20, 30)\u003C\u002Fcode\u003E 时，JS 引擎会创建一个新的函数执行上下文来执行该函数。在创建阶段这个函数执行上下文大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EFunctionExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Declarative\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EArguments\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalLexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E or \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003EVariableEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Declarative\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eg\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalLexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E or \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成创建阶段之后，函数执行上下文进入执行阶段，也就是说对函数内部的变量的赋值操作已经完成，所以在执行阶段该函数执行上下文大概长这样：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token maybe-class-name\"\u003EFunctionExectionContext\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003ELexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Declarative\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EArguments\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalLexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E or \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token literal-property property\"\u003EVariableEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EEnvironmentRecord\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Declarative\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token comment\"\u003E\u002F\u002F Identifier bindings go here\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eg\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eouter\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobalLexicalEnvironment\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003EThisBinding\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"token maybe-class-name\"\u003EGlobal\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E or \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在这个函数执行完之后，函数的返回值被存储到了 \u003Ccode\u003Ec\u003C\u002Fcode\u003E 中，对应地全局词法环境中的 \u003Ccode\u003Ec\u003C\u002Fcode\u003E 的值也被更新了。至此，全局代码被全部运行，这段程序也就结束了。\u003C\u002Fp\u003E\n\u003Cp\u003E**注意：**在上面的词法环境伪代码中，\u003Ccode\u003Elet\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 定义的变量在创建阶段都是 \u003Ccode\u003E&lt; uninitialized &gt;\u003C\u002Fcode\u003E ，而 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 定义的变量则被赋予了 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E。这是因为在创建阶段，JS 引擎会检查代码中的变量和函数的声明。函数声明会被完整地存储在环境中，而变量则会被设置为 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E （使用 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 定义）或者保持未初始化状态（使用 \u003Ccode\u003Elet\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 定义）。\u003C\u002Fp\u003E\n\u003Cp\u003E这也就是为什么我们可以在声明之前访问到 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 定义的变量，但当我们尝试在声明之前访问 \u003Ccode\u003Elet\u003C\u002Fcode\u003E 和 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 变量时会得到一个 \u003Ccode\u003EReferenceError\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Ch1\u003E参考文章\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fjuejin.cn\u002Fpost\u002F6844903682283143181\"\u003E[译] 理解 JavaScript 中的执行上下文和执行栈\u003C\u002Fa\u003E 以及它的原文 \u003Ca href=\"https:\u002F\u002Fmedium.com\u002Fbitsrc\u002Funderstanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0\"\u003EUnderstanding Execution Context and Execution Stack in Javascript\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n",date:d,path:"\u002Fposts\u002F20220414-执行上下文和执行栈\u002F"},{attributes:{title:"Windows 系统下搭建 Flutter 环境并运行 Flutter 项目",date:f,updated:f,categories:[a],tags:["Flutter"]},html:"\u003Cp\u003E组长昨天说今年可能会尝试使用 Flutter 开发一个项目，听到这个消息后我急急忙忙地开卷，毕竟技多不压身。下面简单介绍一下 Windows 系统如何搭建 Flutter 运行环境。\u003C\u002Fp\u003E\n\u003Ch2\u003E获取 Flutter SDK\u003C\u002Fh2\u003E\n\u003Cp\u003E这里有两种方式获取 SDK，一种是直接下载安装压缩包，另一种是通过 git 来获取源码。我选择了前者，因为会省事不少。\u003C\u002Fp\u003E\n\u003Cp\u003E下载地址在\u003Ca href=\"https:\u002F\u002Fdocs.flutter.dev\u002Fget-started\u002Finstall\u002Fwindows\"\u003E官网\u003C\u002Fa\u003E可以找到。\u003C\u002Fp\u003E\n\u003Cp\u003E下载好安装包之后，找一个自己喜欢的目录解压，官方建议最好找一个不需要特殊权限的文件夹进行解压，同时路径里不要包含特殊符号或者空格。这里我选择解压到 \u003Ccode\u003ED:\\flutter\u003C\u002Fcode\u003E，后续的所有操作也以这个路径为准。\u003C\u002Fp\u003E\n\u003Ch2\u003E配置环境变量\u003C\u002Fh2\u003E\n\u003Cp\u003E首先打开环境变量配置，找到系统变量里的 \u003Ccode\u003EPath\u003C\u002Fcode\u003E 并进行编辑操作\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412110205943.png\" alt=\"image-20220412110205943\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E然后点击新建，把自己 \u003Ccode\u003Eflutter\\bin\u003C\u002Fcode\u003E 所在的完整路径填进去，最后点击确定。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412110337670.png\" alt=\"image-20220412110337670\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E完成环境变量的配置，可以打开命令行工具，输入 \u003Ccode\u003Eflutter --version\u003C\u002Fcode\u003E 来检查是否配置成功。由于我们下载的 SDK 里面已经包含了 Dart，所以输入 \u003Ccode\u003Edart --version\u003C\u002Fcode\u003E 也会出现 dart 的版本信息。\u003C\u002Fp\u003E\n\u003Ch2\u003E依赖检查\u003C\u002Fh2\u003E\n\u003Cp\u003E在命令行中运行 \u003Ccode\u003Eflutter doctor\u003C\u002Fcode\u003E 可以自动检查我们的依赖是否有缺失。第一次运行时 flutter 会下载一些东西，所以运行时间可能比较长，耐心等待就可以。运行结果大概长这样：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412111026121.png\" alt=\"image-20220412111026121\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E每个人的检查结果可能都不相同，根据检查的提示自行安装即可。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E注意\u003C\u002Fstrong\u003E：如果你不需要开发桌面端应用的话，Visual Studio 是不需要安装的。\u003C\u002Fp\u003E\n\u003Ch2\u003EAndroid Studio 配置\u003C\u002Fh2\u003E\n\u003Cp\u003E如果你之前没有安装过 Android Studio，那么上面的检查可能会有很多不通过的地方。下面简单介绍 Android Studio 的配置流程。\u003C\u002Fp\u003E\n\u003Ch3\u003E安装\u003C\u002Fh3\u003E\n\u003Cp\u003E首先去\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fstudio\"\u003E官网\u003C\u002Fa\u003E下载安装包并安装，具体安装过程可以自行搜索，需要额外配置 JAVA 环境之类的。\u003C\u002Fp\u003E\n\u003Cp\u003E安装完之后，第一次打开时会有一个引导流程，由于我已经安装过了，所以没有办法截图。只需要记得安装这几样东西：\u003Ccode\u003EAndroid SDK\u003C\u002Fcode\u003E，\u003Ccode\u003EAndroid SDK Command-line Tools\u003C\u002Fcode\u003E，\u003Ccode\u003EAndroid SDK Build-Tools\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E将 Android Studio 初始化完之后，打开命令行工具，输入 \u003Ccode\u003Eflutter config --android-studio-dir D:\\software\\AndroidStudio\u003C\u002Fcode\u003E 来配置 Android Studio 的安装路径。你需要把路径替换为自己的实际安装路径，并且路径里\u003Cstrong\u003E不要有空格\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E这时候再次运行 \u003Ccode\u003Eflutter doctor\u003C\u002Fcode\u003E 应该就可以发现很多依赖项不再爆红了。\u003C\u002Fp\u003E\n\u003Ch3\u003E安装 Android 虚拟机\u003C\u002Fh3\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E这里我略过了真机调试，选择了虚拟机调试，如果有真机调试的需求可以去官方文档自行配置。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E首先打开 Android Studio 中的 AVD Manager\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412115153991.png\" alt=\"image-20220412115153991\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E创建一个新的虚拟机\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412115219412.png\" alt=\"image-20220412115219412\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E选择一个喜欢的机型，然后点击 Next\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412115249842.png\" alt=\"image-20220412115249842\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E选择一个系统镜像，这里我选择的是最新的 Android 12，选择自己需要的版本即可。如果选择了没有安装过的镜像则需要下载，下载速度可能比较慢，耐心等待即可。安装完成后点击 Next\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412115458335.png\" alt=\"image-20220412115458335\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E这里配置页面需要选择硬件加速，选择 \u003Ccode\u003EHardware - GLES 2.0\u003C\u002Fcode\u003E ，然后点击 Finish 即可。**注意：**如果这一选项不可选择，那么可以尝试换一个机型或系统镜像。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412133437865.png\" alt=\"image-20220412133437865\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E最后，打开命令行输入 \u003Ccode\u003Eflutter doctor --android-licenses\u003C\u002Fcode\u003E，一路同意就完事了。\u003C\u002Fp\u003E\n\u003Cp\u003E这时候我们再次输入 \u003Ccode\u003Eflutter doctor\u003C\u002Fcode\u003E 应该就可以发现除了 Visual Studio 外其他的依赖都已经安装完成了。\u003C\u002Fp\u003E\n\u003Ch3\u003E新建一个 Flutter 项目并运行\u003C\u002Fh3\u003E\n\u003Cp\u003E为了能运行 Flutter 项目，我们需要在 Android Studio 的 Plugins 界面中安装两个插件：Flutter 和 Dart，安装完成后重启 IDE 即可。\u003C\u002Fp\u003E\n\u003Cp\u003E重启后我们可以看到一个新的按钮： \u003Ccode\u003ENew Flutter Project\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412134128350.png\" alt=\"image-20220412134128350\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E点进去之后会让我们先配置 flutter 目录，选择完目录后点击 Next\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412134214170.png\" alt=\"image-20220412134214170\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E接着就是项目的一些信息填写。需要注意的是，项目的存放位置不要使用 \u003Ccode\u003E-\u003C\u002Fcode\u003E 或者空格，因为 dart 不支持。所以我们需要使用下划线来分隔单词。下面的 \u003Ccode\u003EOrganization\u003C\u002Fcode\u003E 是填写公司的域名，在应用发布时，它会和项目名称一起作为 Android 的包名。应用发布后包名将无法修改，不过如果不发布的话这一项随便填一下就可以。填完这些信息之后点击 Finish 就可以完成项目创建。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412134450089.png\" alt=\"image-20220412134450089\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E打开刚刚创建好的项目，首先选择我们之前在 AVD Manager 配置的虚拟机，然后选择好运行的 main 文件，点击运行就可以跑起来项目啦\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412135646713.png\" alt=\"image-20220412135646713\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E但是众所周知，有些网站在国内的访问速度是很慢的，所以很有可能你会卡在这一步：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412135821050.png\" alt=\"image-20220412135821050\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E原因是项目默认的 Gradle 的 Maven 仓库我们访问不到，所以我们需要把仓库地址配置为国内镜像源。步骤如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E修改项目目录下的 \u003Ccode\u003Eandroid\u002Fbuild.gradle\u003C\u002Fcode\u003E 文件内的仓库地址为\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Emaven \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E url \u003Cspan class=\"token string\"\u003E'https:\u002F\u002Fmaven.aliyun.com\u002Frepository\u002Fgoogle'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\nmaven \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E url \u003Cspan class=\"token string\"\u003E'https:\u002F\u002Fmaven.aliyun.com\u002Frepository\u002Fjcenter'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\nmaven \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E url \u003Cspan class=\"token string\"\u003E'http:\u002F\u002Fmaven.aliyun.com\u002Fnexus\u002Fcontent\u002Fgroups\u002Fpublic'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220412140306626.png\" alt=\"image-20220412140306626\"\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E修改 flutter SDK目录下的 \u003Ccode\u003Eflutter\\packages\\flutter_tools\\gradle\\flutter.gradle\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eflutter\\packages\\flutter_tools\\gradle\\resolve_dependencies.gradle\u003C\u002Fcode\u003E，同样也是修改仓库地址。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E修改完成后，我们重启 IDE 就可以发现项目可以正常运行啦\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E至此，我们已经可以正常地进行 Flutter 项目跨 Android 平台的开发了。最近开始慢慢学习 Flutter 和 Dart了，身上的担子越来越多，但我还是一如既往的懒。希望自己能坚持下去吧。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n",date:f,path:"\u002Fposts\u002F20220412-Windows下Flutter环境搭建\u002F"},{attributes:{title:"读书笔记：《你不知道的 JavaScript》(1)",date:g,updated:g,categories:[a],tags:["读书笔记",e]},html:"\u003Cp\u003E本篇文章总结自《你不知道的 JavaScript (上卷)》的第一章，是基于书籍内容和我个人的理解总结的，所以可能会有一些纰漏，请酌情阅读（虽然可能只有我自己才会读）。\u003C\u002Fp\u003E\n\u003Ch1\u003E作用域是什么\u003C\u002Fh1\u003E\n\u003Ch2\u003E编译原理\u003C\u002Fh2\u003E\n\u003Cp\u003EJS 代码编译有三个步骤：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E分词\u002F词法分析（Tokenizing\u002FLexing）\u003Cbr\u003E\n这个过程会将代码分解为多个词法单元（token）。比如 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 就会被分解为：\u003Ccode\u003Evar\u003C\u002Fcode\u003E、\u003Ccode\u003Ea\u003C\u002Fcode\u003E、\u003Ccode\u003E=\u003C\u002Fcode\u003E、\u003Ccode\u003E1\u003C\u002Fcode\u003E、\u003Ccode\u003E;\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E解析\u002F词法分析（Parsing）\u003Cbr\u003E\n这个过程会将词法单元流（数组）转换为抽象语法树（Abstract Syntax Tree, AST）。比如 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 会变成下面这样子：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Program\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E11\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"body\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"VariableDeclaration\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"declarations\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"VariableDeclarator\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"id\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Identifier\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"name\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"a\"\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token string-property property\"\u003E\"init\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"type\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Literal\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"start\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"end\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"value\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"token string-property property\"\u003E\"raw\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"1\"\u003C\u002Fspan\u003E\n          \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token string-property property\"\u003E\"kind\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"var\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string-property property\"\u003E\"sourceType\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"module\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E代码生成\u003Cbr\u003E\n这个过程会将 AST 转换为可执行代码。抛开具体细节，其实就是将 \u003Ccode\u003Evar a = 1;\u003C\u002Fcode\u003E 的 AST 转化为一组机器指令（字节码 =&gt; 机器码），用来创建一个叫作 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的变量（包括分配内容等），并将一个值存储在 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 中。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EJS 代码的编译大部分时候都是发生在代码执行前。\u003C\u002Fp\u003E\n\u003Ch2\u003E作用域\u003C\u002Fh2\u003E\n\u003Cp\u003E首先介绍三个概念：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E引擎\u003Cbr\u003E\n负责整个 JavaScript 程序的编译及执行过程\u003C\u002Fli\u003E\n\u003Cli\u003E编译器\u003Cbr\u003E\n负责词法分析、语法分析及代码生成等工作\u003C\u002Fli\u003E\n\u003Cli\u003E作用域\u003Cbr\u003E\n负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并且管理当前执行代码对这些标识符的访问权限\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E以 \u003Ccode\u003Evar a = 1\u003C\u002Fcode\u003E 为例，编译器与作用域的交互如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E遇到 \u003Ccode\u003Evar a\u003C\u002Fcode\u003E 时，编译器会询问作用域\u003Cstrong\u003E是否已经有一个该名称的变量存在于同一个作用域的集合中\u003C\u002Fstrong\u003E。如果是，那么编译器会忽略该变量的声明，然后继续编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E接下来编译器会为引擎生成运行时所需的代码，这些代码用来处理 \u003Ccode\u003Ea = 2\u003C\u002Fcode\u003E 的赋值操作。引擎运行时会先询问作用域，当前的作用域集合中是否存在一个名为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的变量。如果存在，引擎会使用这个变量。如果不存在，引擎会继续查找变量\u003C\u002Fli\u003E\n\u003Cli\u003E如果引擎最终找到了 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 变量，则会将 \u003Ccode\u003E2\u003C\u002Fcode\u003E 赋值给它；如果没找到，则会抛出一个异常\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003E引擎的两种查询方式\u003C\u002Fh3\u003E\n\u003Cp\u003E引擎在寻找变量时有两种查询方式：\u003Ccode\u003ELHS\u003C\u002Fcode\u003E(Left Hand Side) 和 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E(Right Hand Side)\u003C\u002Fp\u003E\n\u003Cp\u003E可以\u003Cstrong\u003E笼统地\u003C\u002Fstrong\u003E认为当变量出现在赋值操作的左侧时会进行 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 查询，出现在右侧时进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 查询。\u003C\u002Fp\u003E\n\u003Cp\u003E例如 \u003Ccode\u003Econsole.log(a)\u003C\u002Fcode\u003E 对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的引用就是一个 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，因为 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 并没有被赋予任何值。相应的，需要去查找并取得 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的值，这样才能将值传递给 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E例如 \u003Ccode\u003Ea = 2\u003C\u002Fcode\u003E 对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的引用是一个 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 引用，因为我们并不关心当前 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 的值是什么，只想为 \u003Ccode\u003E= 2\u003C\u002Fcode\u003E 这个赋值操作找到一个目标\u003C\u002Fp\u003E\n\u003Cp\u003E综上所述，可以将 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 理解为“赋值操作的目标是谁”，将 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 理解为“谁是操作赋值的源头”。也就是说 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 是\u003Cstrong\u003E赋值操作\u003C\u002Fstrong\u003E，\u003Ccode\u003ERHS\u003C\u002Fcode\u003E 是\u003Cstrong\u003E寻值操作\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E下面的代码既包含 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 也包含 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E首先 \u003Ccode\u003Efoo(2)\u003C\u002Fcode\u003E 的函数调用需要对 foo 进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，也就是去寻找 foo 的值。找 foo 的值后函数开始执行，当 \u003Ccode\u003E2\u003C\u002Fcode\u003E 被当作参数传递给 \u003Ccode\u003Efoo(...)\u003C\u002Fcode\u003E 时，\u003Ccode\u003E2\u003C\u002Fcode\u003E 被赋值给了参数 \u003Ccode\u003Ea\u003C\u002Fcode\u003E，因此需要进行 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 查询。这里还有对 \u003Ccode\u003Ea\u003C\u002Fcode\u003E 进行的 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用，并将得到值传给了 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E。而 \u003Ccode\u003Econsole.log(...)\u003C\u002Fcode\u003E 本身也需要一个引用才能执行，因此会对 \u003Ccode\u003Econsole\u003C\u002Fcode\u003E 对象进行 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 查询，并检查得到的值是否有一个叫 \u003Ccode\u003Elog\u003C\u002Fcode\u003E 的方法。最后，假设 \u003Ccode\u003Elog(...)\u003C\u002Fcode\u003E 函数可以接收参数，则在将 \u003Ccode\u003E2\u003C\u002Fcode\u003E 赋值给其第一个参数前，这个参数需要进行一次 \u003Ccode\u003ELHS\u003C\u002Fcode\u003E 引用查询。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220411105712261.png\" alt=\"image-20220411105712261\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E作用域嵌套\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 4\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E上述代码中，对 \u003Ccode\u003Eb\u003C\u002Fcode\u003E 进行的 \u003Ccode\u003ERHS\u003C\u002Fcode\u003E 引用无法在函数 \u003Ccode\u003Efoo\u003C\u002Fcode\u003E 内部完成，但可以在上一级作用域中完成。遍历嵌套作用域链的规则很简单：引擎会从当前的\u003Cstrong\u003E执行作用域\u003C\u002Fstrong\u003E开始查找变量，如果找不到，就去上一级继续查找。当抵达最外层的\u003Cstrong\u003E全局作用域\u003C\u002Fstrong\u003E时，无论找到还是没找到，查找过程都会停止。\u003C\u002Fp\u003E\n\u003Ch3\u003E异常\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F Uncaught ReferenceError: b is not defined \u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Econsole.log(a + b)\u003C\u002Fcode\u003E 时，对 b 进行 RHS 查询是无法找到该变量的，因为它未声明，引擎会抛出 \u003Ccode\u003EReferenceError\u003C\u002Fcode\u003E 异常。\u003C\u002Fp\u003E\n\u003Cp\u003E但如果执行的是 LHS 查询，且程序运行在“非严格模式”下，如果在全局作用域中也无法找到目标变量，则会在全局作用域下隐式地创建一个具有该名称的变量，并将其返回给引擎，比如下面的代码是可以正常运行的：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 4\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E但如果是“严格模式”下运行程序，则也会抛出 \u003Ccode\u003EReferenceError\u003C\u002Fcode\u003E 异常：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token string\"\u003E'use strict'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\n    \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F Uncaught ReferenceError: b is not defined\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E如果 RHS 查询找到了一个变量，但你尝试对这个变量的值进行不合理的操作，比如试图对一个字符串的值进行函数调用，那么引擎会抛出 \u003Ccode\u003ETypeError\u003C\u002Fcode\u003E 异常。\u003C\u002Fp\u003E\n",date:g,path:"\u002Fposts\u002F20220411-《你不知道的JavaScript》(1)\u002F"},{attributes:{title:"常见 ES6 语法的简单用法",date:h,updated:h,categories:[a],tags:[e]},html:"\u003Cp\u003E本文总结于 2021年12月17日，用法比较偏基础，并没有什么实际的干货，唯一的价值可能就是让我的博客数量 +1~\u003C\u002Fp\u003E\n\u003Ch4\u003E一、解构赋值\u003C\u002Fh4\u003E\n\u003Cp\u003E&lt;1&gt; 对象和数组\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E obj \u003Cspan class=\"token comment\"\u003E\u002F\u002F 等价于 const a = 1; const b = 2; const c = 3;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token doc-comment comment\"\u003E\u002F********************************\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E arr \u003Cspan class=\"token comment\"\u003E\u002F\u002F 等价于 const a = 1; const b = 2; const c = 3;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;2&gt; 深度解构\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E c \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E obj \u003Cspan class=\"token comment\"\u003E\u002F\u002F 等价于 const c = 1    tip: b is not defined\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;3&gt; 解构时使用别名\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E count\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E obj \u003Cspan class=\"token comment\"\u003E\u002F\u002F 等价于 const count = 1\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;5&gt; 变量互换\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E b \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E a\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;5&gt; 解构的对象不能为 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E 或 \u003Ccode\u003Enull\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econst {a, b, c} = obj || {}\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E二、...(拓展运算符)\u003C\u002Fh4\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr1 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr2 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E6\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F const mixArr = [...newSet(arr1.concat(arr2))]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E mixArr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003ESet\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \n\u003Cspan class=\"token doc-comment comment\"\u003E\u002F********************************\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj1 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj2 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F const mixObj = Object.assign({}, obj1, obj2)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E mixObj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003Eobj1\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003Eobj2 \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E结合拓展运算符有条件的添加对象的属性：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 此处可以将 isEmpty 封装为函数\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F*\n\tconst isEmpty = (field) =\u003E this[field] === ''\n*\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E isEmpty \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ekeyword\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E''\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E searchCondition \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token spread operator\"\u003E...\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EisEmpty \u003Cspan class=\"token operator\"\u003E&amp;&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ekeyword\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ekeyword\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E三、Object.hasOwn\u003C\u002Fh4\u003E\n\u003Cp\u003E用于判断对象上是否存在某个属性（需要注意兼容性，最好配合 polyfill 使用）\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E person \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'sehci'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eage\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E21\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EhasOwn\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eperson\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"name\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F true\u003C\u002Fspan\u003E\n\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EhasOwn\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eperson\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"gender\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F false\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F Object.hasOwn 本质上是语法糖，等价于以下代码\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eprototype\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EhasOwnProperty\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eperson\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"name\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F true\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E四、includes\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Eincludes\u003C\u002Fcode\u003E 是数组上的一个方法，用于判断一个数组是否包含一个指定的值，返回值为 \u003Ccode\u003Eboolean\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F bad\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword control-flow\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token operator\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F ...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F good\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword control-flow\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eincludes\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F ...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Eincludes\u003C\u002Fcode\u003E 可以接收两个参数： &lt;1&gt; \u003Ccode\u003EvalueToFind\u003C\u002Fcode\u003E 需要查找的元素值 &lt;2&gt; \u003Ccode\u003EfromIndex\u003C\u002Fcode\u003E 从某个索引开始遍历查找\u003C\u002Fp\u003E\n\u003Cp\u003E需要注意的地方是 \u003Ccode\u003EfromIndex\u003C\u002Fcode\u003E 可以为负数\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F arr's length is 3\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F fromIndex is -100\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F computed index is 3 + (-100) = -97\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\narr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eincludes\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F true\u003C\u002Fspan\u003E\narr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eincludes\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F false\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E五、?. (可选链操作符)\u003C\u002Fh4\u003E\n\u003Cp\u003E可选链操作符( \u003Cstrong\u003E\u003Ccode\u003E?.\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E )允许读取位于对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E person \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'sechi'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eage\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E21\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ecat\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'kiki'\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F bad\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E dogName \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E person\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Edog\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;&amp;\u003C\u002Fspan\u003E person\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Edog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ename\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F good\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E dogName \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E person\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Edog\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E?.\u003C\u002Fspan\u003Ename\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EdogName\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F undefined\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E可选链操作符不仅能用于对象，还可以用于函数的调用\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E someInterface \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function-variable function\"\u003EsomeMethod\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'call successfully!'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E result1 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E someInterface\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EanotherMethod\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E?.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F undefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E result2 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E someInterface\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EanotherMethod\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F someInterface.anotherMethod is not a function\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E六、??(空值合并运算符)\u003C\u002Fh4\u003E\n\u003Cp\u003E空值合并操作符（\u003Ccode\u003E??\u003C\u002Fcode\u003E）是一个逻辑操作符，当左侧的操作数为 \u003Ccode\u003Enull\u003C\u002Fcode\u003E 或者 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E 时，返回其右侧操作数，否则返回左侧操作数。\u003Cstrong\u003E注意：它和逻辑或操作符(\u003Ccode\u003E||\u003C\u002Fcode\u003E)不同，逻辑或操作符会在左侧操作数为假值（如\u003Ccode\u003Efalse\u003C\u002Fcode\u003E, \u003Ccode\u003E0\u003C\u002Fcode\u003E,  \u003Ccode\u003E''\u003C\u002Fcode\u003E, \u003Ccode\u003ENaN\u003C\u002Fcode\u003E）时返回右侧操作数。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E nullValue \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E emptyString \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\"\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 空字符串，是一个假值，Boolean(\"\") === false\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E num \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E42\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E valA \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E nullValue \u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"valA 的默认值\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E valB \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E emptyString \u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"valB 的默认值\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E valC \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E num \u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EvalA\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F \"valA 的默认值\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EvalB\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F \"\"（空字符串虽然是假值，但不是 null 或者 undefined）\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EvalC\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 42\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E实际开发中可以用它来简化输入框的非空判断：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F bad\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword control-flow\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evalue \u003Cspan class=\"token operator\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;&amp;\u003C\u002Fspan\u003E value \u003Cspan class=\"token operator\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;&amp;\u003C\u002Fspan\u003E value \u003Cspan class=\"token operator\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E''\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F good\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword control-flow\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evalue\u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E''\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E''\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003ETip:  \u003Ccode\u003E??\u003C\u002Fcode\u003E 不可以直接与 \u003Ccode\u003E&amp;&amp;\u003C\u002Fcode\u003E 和 \u003Ccode\u003E||\u003C\u002Fcode\u003E 组合使用，原因是空值合并操作符和其他逻辑操作符之间的运算优先级\u002F运算顺序是未定义的。组合使用时需要使用括号来显式地表明优先级\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"foo\"\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 抛出 SyntaxError\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword null nil\"\u003Enull\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword nil\"\u003Eundefined\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E??\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"foo\"\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 返回 \"foo\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E七、Object.entries \u002F Object.keys \u002F Object.values \u002F Object.fromEntries\u003C\u002Fh4\u003E\n\u003Cp\u003EObject.entries \u002F Object.keys \u002F Object.values 这三个方法都可以将对象转换为数组，并且只会遍历自身的属性而不会遍历原型链中的属性。\u003C\u002Fp\u003E\n\u003Cp\u003E&lt;1&gt; \u003Cstrong\u003E\u003Ccode\u003EObject.entries()\u003C\u002Fcode\u003E\u003Cstrong\u003E方法返回一个给定对象自身可枚举属性的\u003C\u002Fstrong\u003E键值对\u003C\u002Fstrong\u003E数组。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 简单示例\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果 key 可以被排序，那么遍历的顺序会由 key 决定\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E anObj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EanObj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E myObj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003EgetFoo\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword control-flow\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nmyObj\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'bar'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EmyObj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F [ ['foo', 'bar'] ]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果传入的参数类型不是对象，则会被强制转换为对象类型\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'foo'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如何优雅地迭代键值对~\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword control-flow\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ekey\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E value\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eof\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Ekey\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Evalue\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F \"a 5\", \"b 7\", \"c 9\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 梅开二度\u003C\u002Fspan\u003E\n\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ekey\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E value\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Ekey\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Evalue\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F \"a 5\", \"b 7\", \"c 9\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;2&gt; \u003Cstrong\u003E\u003Ccode\u003EObject.keys()\u003C\u002Fcode\u003E \u003Cstrong\u003E方法会返回一个由一个给定对象的自身可枚举\u003C\u002Fstrong\u003E属性\u003C\u002Fstrong\u003E组成的数组。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果参数为数组，那么会返回由索引组成的数组\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Earr\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F console: ['0', '1', '2']\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 简单示例\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F console: ['0', '1', '2']\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果 key 可以被排序，那么遍历的顺序会由 key 决定\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E anObj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EanObj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F console: ['2', '7', '100']\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E myObj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003EgetFoo\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function-variable function\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword control-flow\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nmyObj\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EmyObj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F console: ['foo']\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;3&gt; \u003Cstrong\u003E\u003Ccode\u003EObject.values()\u003C\u002Fcode\u003E\u003Cstrong\u003E方法返回一个给定对象自身的所有可枚举\u003C\u002Fstrong\u003E属性值\u003C\u002Fstrong\u003E的数组。\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 简单示例\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Efoo\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'bar'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ebaz\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E42\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ['bar', 42]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果 key 可以被排序，那么遍历的顺序会由 key 决定\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E an_obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ean_obj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ['b', 'c', 'a']\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E my_obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003EgetFoo\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token function-variable function\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword control-flow\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nmy_obj\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'bar'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emy_obj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ['bar']\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 如果传入的参数类型不是对象，则会被强制转换为对象类型\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'foo'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F ['f', 'o', 'o']\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E&lt;4&gt; \u003Cstrong\u003E\u003Ccode\u003EObject.fromEntries()\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 方法把键值对列表转换为一个对象。执行的操作与 \u003Cstrong\u003E\u003Ccode\u003EObject.fromEntries\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 相反\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F Map 转化为 Object\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E map \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EMap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'foo'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'bar'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'baz'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E42\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EfromEntries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emap\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F { foo: \"bar\", baz: 42 }\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F Array 转化为 Object\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E arr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'0'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'a'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'1'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'b'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'2'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'c'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E obj \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EfromEntries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Earr\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobj\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F { 0: \"a\", 1: \"b\", 2: \"c\" }\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 优雅地用数组方法处理对象~\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E object1 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Ec\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E object2 \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EfromEntries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token known-class-name class-name\"\u003EObject\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eentries\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobject1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E key\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E key\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eobject2\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F { a: 2, b: 4, c: 6 }\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",date:h,path:"\u002Fposts\u002F20220402-常见ES6语法简单用法\u002F"},{attributes:{title:"使用 Webhook 实现前端项目的自动化部署",date:i,updated:i,categories:[a],tags:[j]},html:"\u003Cp\u003E填一下上次部署网站遗留的坑：如何进行前端项目的自动化部署？\u003C\u002Fp\u003E\n\u003Cp\u003E自动化部署的解决方案有很多，比如 \u003Ccode\u003EJenkins\u003C\u002Fcode\u003E、\u003Ccode\u003EDrone\u003C\u002Fcode\u003E、\u003Ccode\u003EGitLab CI\u002FCD\u003C\u002Fcode\u003E、\u003Ccode\u003Ecron 定时任务\u003C\u002Fcode\u003E、\u003Ccode\u003EWebhook\u003C\u002Fcode\u003E等。最开始我尝试使用 Jenkins 进行自动化部署，但是配置到一半我发现 Jenkins 对于我来说太“重”了，绝大部分的功能对我来说都意义不大，毕竟我现在只是想自动化部署一个极其简单的博客，用上 Jenkins 有些买椟还珠了。后来我发现使用 cron 设置定时任务好像还挺简单的，但是有一个显而易见的缺点：无法判断是否需要重新部署，因此会进行很多无意义的操作。最后思来想去还是决定使用 Webhook 来进行自动化部署，它有很多的优点：配置简单，十分轻量，功能不局限于自动化部署。所以还是非常值得学习一下的。\u003C\u002Fp\u003E\n\u003Ch3\u003E什么是 Webhook？\u003C\u002Fh3\u003E\n\u003Cp\u003EWebhook 的概念早在 2007 年就被提出了（但我才刚知道有这么个概念），首先要说明一点，Webhook 并不是一种\u003Cstrong\u003E工具\u003C\u002Fstrong\u003E，而是一个\u003Cstrong\u003E概念\u003C\u002Fstrong\u003E或者说\u003Cstrong\u003E方法\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E简单理解的话，Webhook 就是一种反向 API 机制，类似于 trigger。API 的使用场景如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E服务器端提供一个 API\u003C\u002Fli\u003E\n\u003Cli\u003E客户端请求这 API\u003C\u002Fli\u003E\n\u003Cli\u003E服务器端接收到请求，并向客户端返回数据\u003C\u002Fli\u003E\n\u003Cli\u003E客户端拿到数据进行对应的处理\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E而 Webhook 的使用场景则相反：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E客户端给服务端提供一个 Webhook URL\u003C\u002Fli\u003E\n\u003Cli\u003E当某些事件被触发时，服务器端会主动向客户端提供的 URL 推送数据\u003C\u002Fli\u003E\n\u003Cli\u003E客户端拿到数据进行对应的处理\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E其实就是客户端由原本的主动请求者变为了被动接收者。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401144700498.png\" alt=\"image-20220401144700498\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EWebhook 的应用场景\u003C\u002Fh3\u003E\n\u003Cp\u003EWebhook 的应用场景非常广泛，比如安全性要求非常高的支付功能，第三方平台的鉴权、登录，资源同步等。\u003C\u002Fp\u003E\n\u003Cp\u003E想象一下这个场景：客户端现在向服务器端上传了一个比较大的文件，而这个文件需要在服务器端进行处理之后才返回给客户端，恰巧这时候服务器端有很多的文件待处理，需要排队等待。如果按照传统做法，客户端需要不断地轮询服务器来获取文件的处理状态，但如果使用 Webhook 就不需要再进行轮询了，只需要让服务器端在完成处理后向客户端提供的 Webhook URL 发送一个请求并返回处理后的文件就可以了。be like:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401152951862.png\" alt=\"image-20220401152951862\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E使用 Webhook 实现自动化部署\u003C\u002Fh3\u003E\n\u003Cp\u003E简单介绍完 Webhook 之后，我们开始回归正题：自动化部署。\u003C\u002Fp\u003E\n\u003Cp\u003EGitHub 本身就提供了 Webhook 的设置，所以我们可以很方便的监听远程仓库的各种事件，比如 \u003Ccode\u003Epush\u003C\u002Fcode\u003E, \u003Ccode\u003Efolk\u003C\u002Fcode\u003E, \u003Ccode\u003Epull-request\u003C\u002Fcode\u003E 等。所以我们可以大体想到这么一个方案：在服务器上搭建一个 Node 服务用来监听 GitHub 发送过来的信息，每当远程仓库有 commit 时就让 GitHub 向我们的服务器发送一个请求，服务器接收到请求后会自动运行提前准备好的 bash 脚本，完成项目的自动化部署。有了思路之后我们开始一步步进行。\u003C\u002Fp\u003E\n\u003Ch4\u003E搭建 Node 服务\u003C\u002Fh4\u003E\n\u003Cp\u003E秉承“尽量不要重复造轮子”的原则，我们可以使用\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Frvagg\u002Fgithub-webhook-handler\"\u003E一个已经封装好的库\u003C\u002Fa\u003E进行 Webhook 的处理，这个库的代码并不多，逻辑也比较容易懂，建议读一读。\u003C\u002Fp\u003E\n\u003Cp\u003E首先在服务器上创建 Node 服务的根目录，然后在根目录下运行 \u003Ccode\u003Enpm init -y\u003C\u002Fcode\u003E 进行初始化，运行 \u003Ccode\u003Enpm i github-webhook-handler\u003C\u002Fcode\u003E 安装依赖，安装完成后，我们可以在根目录创建一个 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 文件，并写入以下内容：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E http \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'http'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E createHandler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'github-webhook-handler'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E handler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EcreateHandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Epath\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'\u002Fwebhook'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Esecret\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'yourSecret'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F secret 相当于一个密码，可以自行设置\u003C\u002Fspan\u003E\n\nhttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EcreateServer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EstatusCode\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E404\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'no such location'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elisten\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E7777\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'server listening on port 7777'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'error'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Error:'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 push 事件 \u003C\u002Fspan\u003E\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'push'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003EReceived a push event from \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Erepository\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E to \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E接着我们可以使用 pm2 启动服务器 \u003Ccode\u003Epm2 start index.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E启动完成后我们就需要到 GitHub 上设置 Webhook 了\u003C\u002Fp\u003E\n\u003Ch4\u003EWebhook 设置\u003C\u002Fh4\u003E\n\u003Cp\u003E首先进入到代码所在的 GitHub 仓库，点击 \u003Ccode\u003ESetting\u003C\u002Fcode\u003E，找到 \u003Ccode\u003EWebhooks\u003C\u002Fcode\u003E 选项卡，点击 \u003Ccode\u003EAdd webhook\u003C\u002Fcode\u003E 来新建一个 Webhook\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401160047209.png\" alt=\"image-20220401160047209\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E新建界面如下：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401160329887.png\" alt=\"image-20220401160329887\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EPayload URL\u003C\u002Fcode\u003E 就是我们的服务器的请求路径，也就是服务器 IP 地址，加上我们上面设置的端口号最后加上我们设置的 \u003Ccode\u003Epath\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EContent type\u003C\u002Fcode\u003E 一定要选择 \u003Ccode\u003Eapplication\u002Fjson\u003C\u002Fcode\u003E，这一点在 \u003Ccode\u003Egithub-webhook-handler\u003C\u002Fcode\u003E 的文档中也有提到。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003ESecret\u003C\u002Fcode\u003E 就是我们之前设置的 \u003Ccode\u003Esecret\u003C\u002Fcode\u003E，保持一致就可以了。\u003C\u002Fp\u003E\n\u003Cp\u003E因为我们只需要自动化部署的功能，所以只需要监听 \u003Ccode\u003Epush\u003C\u002Fcode\u003E 事件就可以了。日志也勾上，里面会有很多 Webhook 的配置，可以拿来参考做一些自定义的东西。\u003C\u002Fp\u003E\n\u003Cp\u003E创建完成后，GitHub 会自动测试 Webhook 的可用性，如果显示的是绿色对号，那说明我们的配置没有问题，但如果是红色叉号，那就说明我们的配置存在问题，这里有一个小坑，如果你直接去修改这个 Webhook 的配置，即使修改正确这里的状态也不会改变，因为 GitHub 只会在创建 Webhook 的时候进行连接测试，所以如果你想知道自己修改后的配置是否正确，建议删除原来的 Webhook 然后重新创建，这时候就能知道修改后的配置是否正确了。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401162119764.png\" alt=\"image-20220401162119764\"\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E编写部署脚本\u003C\u002Fh4\u003E\n\u003Cp\u003E现在我们已经可以监听远程仓库的 \u003Ccode\u003Epush\u003C\u002Fcode\u003E 事件了，所以我们只需要在接收事件后运行一下脚本就可以实现自动化部署啦~将 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 的内容稍作修改：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E http \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'http'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E spawn \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'child_process'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Espawn\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E createHandler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'github-webhook-handler'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E handler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EcreateHandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Epath\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'\u002Fwebhook'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Esecret\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'yourSecret'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F secret 相当于一个密码，可以自行设置\u003C\u002Fspan\u003E\n\nhttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EcreateServer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EstatusCode\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E404\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'no such location'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elisten\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E7777\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'server listening on port 7777'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'error'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Error:'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 push 事件 \u003C\u002Fspan\u003E\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'push'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003EReceived a push event from \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Erepository\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E to \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003ErunCmd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'sh'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'.\u002Fdeploy.sh'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Etext\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etext\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 运行命令\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ErunCmd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ecmd\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E args\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E callback\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E child \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Espawn\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecmd\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E args\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E resMsg \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Deploy End\"\u003C\u002Fspan\u003E\n\n  child\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Estdout\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'data'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ebuffer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E resMsg \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E buffer\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EtoString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  child\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Estdout\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'end'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecallback\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EresMsg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后在 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 的同级目录下新建 \u003Ccode\u003Edeploy.sh\u003C\u002Fcode\u003E 文件：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-sh\"\u003E\u003Ccode class=\"language-sh\"\u003Eecho &quot;Start deployment&quot;\ncd ~\u002Fwww\u002Fnuxt-blog\necho &quot;stop process&quot;\npm2 stop nuxt-blog\necho &quot;pulling source code...&quot;\ngit pull\necho &quot;check dependencies&quot;\nnpm install\necho &quot;build \u002F.nuxt&quot;\nnpm run build\necho &quot;start process&quot;\npm2 start\necho &quot;Finished.&quot;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E脚本的内容仅供参考，请自行修改\u003C\u002Fp\u003E\n\u003Cp\u003E完成以上步骤之后，我们可以自行测试一下（测试前不要忘记重启服务），本地向远程仓库提交一些修改，比如样式的修改等，然后过一小会去访问网站看一下修改是否生效。\u003C\u002Fp\u003E\n\u003Cp\u003E至此，我们已经完成了自动化部署的需求，其实 Webhook 的用途还有很多，比如有人向仓库提了 \u003Ccode\u003Eissue\u003C\u002Fcode\u003E 可以自动给我们发送提醒邮件，或者也可以通过一些第三方的平台进行个性化提醒，例如钉钉的智能机器人。建议有时间的话可以多多探索~\u003C\u002Fp\u003E\n",date:i,path:"\u002Fposts\u002F20220401-使用Webhook实现自动化部署\u002F"},{attributes:{title:"使用 PicGO + 腾讯云COS 搭建自己的图床",date:k,updated:k,categories:[a],tags:["图床"]},html:"\u003Cp\u003E迫于发现博客不能没有图片，就像西方不能没有耶路撒冷，决定自己搭建一个图床，本来以为会是比较困难的一件事，但是查阅资料之后发现居然意外地简单，感谢大佬们造的轮子。下面以 PicGo 为例搭建一个属于自己的图床。\u003C\u002Fp\u003E\n\u003Ch3\u003E下载并安装 PicGo\u003C\u002Fh3\u003E\n\u003Cp\u003E在这里放上 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FMolunerfinn\u002FPicGo\"\u003EPicGo 的 GitHub 地址\u003C\u002Fa\u003E，请自行根据系统下载。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fpicgo.github.io\u002FPicGo-Doc\u002Fzh\u002Fguide\u002F\"\u003EPicGo 的官方文档\u003C\u002Fa\u003E 也放上，方便各位自行查阅。\u003C\u002Fp\u003E\n\u003Ch3\u003E创建存储桶\u003C\u002Fh3\u003E\n\u003Cp\u003EPicGo 支持多个图床，如\u003Ccode\u003E七牛图床\u003C\u002Fcode\u003E、\u003Ccode\u003E腾讯云COS\u003C\u002Fcode\u003E、\u003Ccode\u003E阿里云OSS\u003C\u002Fcode\u003E等，在这里我选择使用\u003Ccode\u003E腾讯云COS\u003C\u002Fcode\u003E 进行演示。\u003C\u002Fp\u003E\n\u003Cp\u003E首先进入腾讯云的\u003Ca href=\"https:\u002F\u002Fconsole.cloud.tencent.com\u002Fcos\u002Fbucket\"\u003E对象存储控制台\u003C\u002Fa\u003E，在\u003Ccode\u003E资源包管理\u003C\u002Fcode\u003E选项卡里可以看到自己的资源包，如果没有话可以根据自己的需求购买，价格相对来说还是比较亲民的，另外新用户会赠送有效期六个月的 50g 容量包。\u003C\u002Fp\u003E\n\u003Cp\u003E购买完成后，进入\u003Ccode\u003E存储桶列表\u003C\u002Fcode\u003E标签页，在这里我们可以创建存储桶，点击创建存储桶，会出现以下界面：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220331171659674.png\" alt=\"image-20220331171659674\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E存储桶的所属区域可以根据自身选择，最好选择与服务器在同一区域（如果你的服务器也是腾讯云的话）\u003C\u002Fp\u003E\n\u003Cp\u003E名称的话最好有规律可循，我个人习惯就是\u003Ccode\u003E用途-时间\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E访问权限的话需要选择公有读私有写，毕竟这是个图床\u003C\u002Fp\u003E\n\u003Cp\u003E上面几项填完后点击下一步，出现以下界面：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220331172203030.png\" alt=\"image-20220331172203030\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E版本控制我没有选择打开，因为需要额外收费 XD\u003C\u002Fp\u003E\n\u003Cp\u003E日志存储也没有打开，因为感觉挺没必要，毕竟只是当个图床\u003C\u002Fp\u003E\n\u003Cp\u003E存储桶标签的话就是一个键值对，主要作为管理存储桶的一个标识，这个就随意填上吧\u003C\u002Fp\u003E\n\u003Cp\u003E服务端加密我也没有打开，因为这是一个图床（万能的理由）\u003C\u002Fp\u003E\n\u003Cp\u003E再次点击下一步之后会展示确认页，如果没有问题的话点击创建吧\u003C\u002Fp\u003E\n\u003Ch3\u003E配置图床\u003C\u002Fh3\u003E\n\u003Cp\u003E打开 PicGo，进入腾讯云COS 的设置界面，可以看到以下界面：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220331172914261.png\" alt=\"image-20220331172914261\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003ECOS 版本选择 V5\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003ESecretId\u003C\u002Fcode\u003E  \u003Ccode\u003ESecretKey\u003C\u002Fcode\u003E  \u003Ccode\u003EAPPID\u003C\u002Fcode\u003E 可以到\u003Ca href=\"https:\u002F\u002Fconsole.cloud.tencent.com\u002Fcam\u002Fcapi\"\u003E这里\u003C\u002Fa\u003E来获取\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220331173213939.png\" alt=\"image-20220331173213939\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E存储空间名就是我们先前创建的存储桶的名字\u003C\u002Fp\u003E\n\u003Cp\u003E存储区域则是创建存储桶时选择的区域的编号，比如北京区域的就是 \u003Ccode\u003Eap-beijing\u003C\u002Fcode\u003E， 具体可以在\u003Ca href=\"https:\u002F\u002Fconsole.cloud.tencent.com\u002Fcos\u002Fbucket\"\u003E这里\u003C\u002Fa\u003E看到\u003C\u002Fp\u003E\n\u003Cp\u003E存储路径非必填，如果不填的话会把图片默认存储在根目录\u003C\u002Fp\u003E\n\u003Cp\u003E自定义域名我没有填，如果设置的话，PicGo 会以\u003Ccode\u003E自定义域名+储存路径+上传的图片名\u003C\u002Fcode\u003E的方式返回图片地址\u003C\u002Fp\u003E\n\u003Cp\u003E全部配置完成后点击确定，之后可以选择将腾讯云COS设为默认图床。\u003C\u002Fp\u003E\n\u003Ch3\u003E与 Typora 关联\u003C\u002Fh3\u003E\n\u003Cp\u003E完成以上所有步骤后，我们已经搭建好了图床并可以正常使用啦~\u003C\u002Fp\u003E\n\u003Cp\u003E对我个人而言，图床的作用更多的是在编写 markdown 文件时插入图片使用的，而作为一款非常流行的 markdown 编辑器，Typora 提供了对 PicGO 的支持，经过简单的配置后我们可以更加方便的在 markdown 中插入图片。\u003C\u002Fp\u003E\n\u003Cp\u003E首先，打开 Typora，在左上角点击\u003Ccode\u003E文件-偏好设置\u003C\u002Fcode\u003E，进入\u003Ccode\u003E图像\u003C\u002Fcode\u003E设置，并设置以下内容：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220331210940280.png\" alt=\"image-20220331210940280\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E设置完成后，每次在 markdown 中插入图片时都会自动上传到自己的图床，无需手动上传。配合 \u003Ccode\u003ESnipaste\u003C\u002Fcode\u003E 简直是太香了~\u003C\u002Fp\u003E\n\u003Cp\u003E至此，我们就完成了一个简单的图床的搭建，粗略地翻阅了一下文档，发现 PicGo 还有许多其他有用的功能和插件，等有时间再去探索吧~\u003C\u002Fp\u003E\n",date:k,path:"\u002Fposts\u002F20220331-使用PicGo搭建图床\u002F"},{attributes:{title:"通过 Nginx 把网站改为 HTTPS 协议",date:l,updated:l,categories:[a],tags:[j]},html:"\u003Cp\u003E填一下上次部署网站遗留的坑：如何使用 Nginx 安装 SSL 证书，从而使网站的协议由 http 变为 https\u003C\u002Fp\u003E\n\u003Ch3\u003E前期准备\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003E首先，我们需要给我们的域名申请 SSL 证书，既有免费证书，也有付费证书，一般来讲免费证书就已经够用了，所以在这里只介绍免费证书的申请方法。\u003Cbr\u003E\n这里建议去\u003Ca href=\"https:\u002F\u002Fhomenew.console.aliyun.com\u002Fhome\u002Fdashboard\u002FProductAndService\"\u003E阿里云\u003C\u002Fa\u003E或\u003Ca href=\"https:\u002F\u002Fconsole.cloud.tencent.com\u002Fcertoverview\"\u003E腾讯云\u003C\u002Fa\u003E申请证书（我选择的是腾讯云，所以下述步骤以腾讯云为准），申请步骤非常简单，只需要填上一些必要的信息（域名、邮箱等）就可以申请，大概 1-10 分钟就可以拿到证书啦。\u003C\u002Fli\u003E\n\u003Cli\u003E申请完成后我们可以在证书管理界面下载证书，下载的格式选择 Nginx，解压后可以得到四个文件:\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top_bundle.crt\u003C\u002Fcode\u003E 证书文件\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top_bundle.pem\u003C\u002Fcode\u003E 证书文件（安装时可忽略该文件）\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top.key\u003C\u002Fcode\u003E 私钥文件\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top.csr\u003C\u002Fcode\u003E CSR 文件（安装时可忽略该文件）\u003Cbr\u003E\n其实安装证书的过程中真正用到的只有 \u003Ccode\u003Ecrt\u003C\u002Fcode\u003E 文件和 \u003Ccode\u003Ekey\u003C\u002Fcode\u003E 文件\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E有了证书之后我们需要把它们上传到服务器上，这里我使用的是 XFTP 进行文件上传。首先我们需要在 Nginx 的根目录新建一个文件夹存放证书，然后把两个文件放到该文件夹内。最终达到的效果：\u003Ccode\u003E\u002Fetc\u002Fnginx\u002Fcert\u003C\u002Fcode\u003E 中存放了 \u003Ccode\u003Eplantsechi.top_bundle.crt\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eplantsechi.top.key\u003C\u002Fcode\u003E 两个文件。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003ENginx 配置\u003C\u002Fh3\u003E\n\u003Cp\u003E进行完以上操作后，我们需要修改一下 Nginx 的配置，下面放出我的部分配置供参考：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Eupstream webserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\t\tserver \u003Cspan class=\"token number\"\u003E127.0\u003C\u002Fspan\u003E.0.1:7070\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\tserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n   \t\t\tlisten \u003Cspan class=\"token number\"\u003E443\u003C\u002Fspan\u003E ssl\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tserver_name plantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#域名\u003C\u002Fspan\u003E\n    \t\tssl_certificate  \u002Fetc\u002Fnginx\u002Fcert\u002Fplantsechi.top_bundle.crt\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#证书文件的路径\u003C\u002Fspan\u003E\n    \t\tssl_certificate_key \u002Fetc\u002Fnginx\u002Fcert\u002Fplantsechi.top.key\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#私钥文件的路径\u003C\u002Fspan\u003E\n    \t\tssl_session_timeout 5m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n   \t\t\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003ENULL:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EaNULL:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EMD5:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EADH:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003ERC4\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tssl_protocols TLSv1.2 TLSv1.3\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tssl_prefer_server_ciphers on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n    \t\t\u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E            on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tgzip_types      text\u002Fplain application\u002Fxml text\u002Fcss application\u002Fjavascript\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tgzip_min_length \u003Cspan class=\"token number\"\u003E1000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n    \t\tlocation \u002F \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        \t\t\texpires \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_redirect                      off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header Host               \u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Real-IP          \u003Cspan class=\"token variable\"\u003E$remote_addr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Forwarded-For    \u003Cspan class=\"token variable\"\u003E$proxy_add_x_forwarded_for\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Forwarded-Proto  \u003Cspan class=\"token variable\"\u003E$scheme\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_read_timeout          1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_connect_timeout       1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_pass         http:\u002F\u002Fwebserver\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \n    \t\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成以上配置就可以通过 https 协议访问网站啦~但是还是有一些地方不太完美，如果在浏览器依旧输入 http 协议的 URL，依旧会使用 http 协议，所以我们需要让网站的 http 请求自动重定向到 https，该功能同样可以通过 Nginx 实现，只需要再额外监听 80 端口就可以实现：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\tserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \t\tlisten \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tserver_name plantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \n    \t\t\u003Cspan class=\"token builtin class-name\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E301\u003C\u002Fspan\u003E https:\u002F\u002F\u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token variable\"\u003E$request_uri\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#将默认 80 端口的请求重定向为 https\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E至此，我们已经成功将网站的协议改为 https，还是挺简单的~\u003C\u002Fp\u003E\n",date:l,path:"\u002Fposts\u002F20220328-通过Nginx把网站改为HTTPS协议\u002F"},{attributes:{title:"从零开始在 Ubuntu 上部署 Nuxt 项目",date:m,updated:"2022\u002F03\u002F28 10:05:00",categories:[a],tags:["Linux","Nuxt",j]},html:"\u003Ch2\u003E前置工作\u003C\u002Fh2\u003E\n\u003Cp\u003E部署使用的 Ubuntu 版本：Ubuntu 20.04.4 LTS (GNU\u002FLinux 5.4.0-96-generic x86_64)\u003C\u002Fp\u003E\n\u003Cp\u003E整个部署过程我都是使用 root 用户进行操作，所以不会有权限问题，但如果你是使用其他用户进行操作，则需要注意权限问题，适时给命令加上 \u003Ccode\u003Esudo\u003C\u002Fcode\u003E 前缀\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 npm\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install npm\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm config set registry https:\u002F\u002Fregistry.npmmirror.com\u003C\u002Fcode\u003E 配置国内 npm 镜像\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 n\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g n\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E使用 n 安装 node\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003En lts\u003C\u002Fcode\u003E  安装 node 的长期支持版\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En 14.17.6\u003C\u002Fcode\u003E 安装特定版本的 node（此处仅做演示，请根据实际需求安装特定的 node 版本）\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En\u003C\u002Fcode\u003E 切换当前 node 版本，切换的同时 npm 版本也会改变。可以通过 \u003Ccode\u003Enode -v\u003C\u002Fcode\u003E 查看当前 node 版本\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 pm2\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g pm2\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E安装并配置 git\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install git\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.name \u003Cspan class=\"token string\"\u003E'用户名'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.email \u003Cspan class=\"token string\"\u003E'邮箱'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Essh-keygen -C '邮箱' -t rsa\u003C\u002Fcode\u003E  默认生成目录为 \u003Ccode\u003E~\u002F.ssh\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Ecat ~\u002F.ssh\u002Fid_rsa.pub\u003C\u002Fcode\u003E 复制 ssh key 并将其加入 github 的设置中\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E单独说一下我遇到的问题：在进行完以上步骤后，我尝试使用 \u003Ccode\u003Egit clone git@github.com:sechi747\u002Fnuxt-blog.git \u003C\u002Fcode\u003E 命令拉取我的个人仓库，结果失败了。错误信息如下：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Ekex_exchange_identification: read: Connection reset by peer\nfatal: Could not \u003Cspan class=\"token builtin class-name\"\u003Eread\u003C\u002Fspan\u003E from remote repository\n\nPlease \u003Cspan class=\"token function\"\u003Emake\u003C\u002Fspan\u003E sure you have the correct access rights\nand the repository exists\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E尝试了许多种方法进行解决，包括但不限于：重装系统，重新生成 ssh key，根据 github 官方的指南一步一步进行操作等都没有起作用。下面是我最终的解决方法。\u003C\u002Fp\u003E\n\u003Cp\u003E进入到 \u003Ccode\u003E.ssh\u003C\u002Fcode\u003E 文件夹下，新建 \u003Ccode\u003Econfig\u003C\u002Fcode\u003E 文件（如果有就不用建了，直接修改就可以），添加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003EHost github.com\nHostname ssh.github.com\nPort \u003Cspan class=\"token number\"\u003E443\u003C\u002Fspan\u003E\nUser \u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后再进行 \u003Ccode\u003Egit\u003C\u002Fcode\u003E 操作就不会有问题了。造成这个现象的原因暂时不清楚，等有空再细查吧。\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 Nginx\u003C\u002Fh4\u003E\n\u003Cp\u003E此处安装的 Nginx 版本为：nginx\u002F1.18.0 (Ubuntu)\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install nginx\u003C\u002Fcode\u003E 安装 Nginx\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eservice nginx start\u003C\u002Fcode\u003E 启动 Nginx\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 MySQL\u003C\u002Fh4\u003E\n\u003Cp\u003E其实我的博客项目并不涉及数据库，但是为了熟悉 Linux 操作还是装上吧~\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 MySQL 版本为：8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install mysql-server\u003C\u002Fcode\u003E 安装 MySQL\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl status mysql.service\u003C\u002Fcode\u003E 看一下有没有安装成功\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Emysql -u root -p\u003C\u002Fcode\u003E 因为安装时并没有要求设置密码，所以密码默认为空，直接敲回车就能进入控制台了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Euse mysql;\u003C\u002Fcode\u003E 切换到 mysql 数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ealter user 'root'@'localhost' identified with mysql_native_password by '密码';\u003C\u002Fcode\u003E  修改 root 账号的密码加密方式和密码，这样就可以在客户端使用密码连接数据库了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Egrant all on *.* to 'root'@'localhost';\u003C\u002Fcode\u003E 使外网可以访问到数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fmysql\u002Fmysql.conf.d\u002Fmysqld.cnf\u003C\u002Fcode\u003E 将里面的\u003Ccode\u003Ebind-address\u003C\u002Fcode\u003E 和 \u003Ccode\u003Emysqlx-bind-address\u003C\u002Fcode\u003E 修改为 \u003Ccode\u003E0.0.0.0\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl restart mysql\u003C\u002Fcode\u003E 重启 MySQL 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 Docker\u003C\u002Fh4\u003E\n\u003Cp\u003Edocker 肯定是会用到的，虽然我现在没用到~ 这里直接把官网的安装教程搬过来\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 Docker 版本为：20.10.14, build a224086\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E安装一些必要的包\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E ca-certificates \u003Cspan class=\"token function\"\u003Ecurl\u003C\u002Fspan\u003E gnupg lsb-release\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E\n\u003Cp\u003E添加 docker 官方的 GPG 密钥\u003Cbr\u003E\n\u003Ccode\u003Ecurl -fsSL https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu\u002Fgpg | sudo gpg --dearmor -o \u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E设置稳定版的 docker 仓库\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E\\\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string\"\u003E\"deb [arch=\u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Edpkg --print-architecture\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E signed-by=\u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg] https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu \\\n  \u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Elsb_release -cs\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E stable\"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E|\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Esudo\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Etee\u003C\u002Fspan\u003E \u002Fetc\u002Fapt\u002Fsources.list.d\u002Fdocker.list \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u002Fdev\u002Fnull\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E安装 docker 引擎\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E docker-ce docker-ce-cli containerd.io\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E验证安装是否成功\u003Cbr\u003E\n\u003Ccode\u003Edocker run hello-world\u003C\u002Fcode\u003E\u003Cbr\u003E\n由于我们本地是没有 hello-world 这个镜像的，所以会去服务器 pull，如果发现成功运行了 hello-world 镜像，出现了 Hello from Docker 的，那么就算是安装成功啦！\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E配置 docker 镜像加速源\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Evim\u003C\u002Fspan\u003E \u002Fetc\u002Fdocker\u002Fdaemon.json\n\n\u003Cspan class=\"token comment\"\u003E#在文件中添加以下内容\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n   \u003Cspan class=\"token string\"\u003E\"registry-mirrors\"\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin class-name\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n       \u003Cspan class=\"token string\"\u003E\"https:\u002F\u002Fmirror.ccs.tencentyun.com\"\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E#添加完成后执行下面的命令重启 docker 服务器\u003C\u002Fspan\u003E\nsystemctl restart \u003Cspan class=\"token function\"\u003Edocker\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E由于 DockerHub 部署在国外，如果直接使用 \u003Ccode\u003Edocker pull\u003C\u002Fcode\u003E 拉取镜像速度会比较慢，所以推荐配置一下 Docker镜像加速源，这里我选择的是腾讯云提供的加速源。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003E项目部署\u003C\u002Fh2\u003E\n\u003Cp\u003E经过了上面的一系列准备，终于可以开始正式部署啦！\u003C\u002Fp\u003E\n\u003Cp\u003Enuxt 官网提供了两种部署方式，一种是使用 \u003Ccode\u003Enpm run build &amp; npm run start\u003C\u002Fcode\u003E 进行 ssr 部署，另一种是使用 \u003Ccode\u003Enpm run generate \u003C\u002Fcode\u003E 进行静态应用部署，这里我选择的是 ssr 部署。\u003C\u002Fp\u003E\n\u003Cp\u003E在部署之前，我们需要在项目中增加一些配置。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E在 \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E 中增加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E  \u003Cspan class=\"token literal-property property\"\u003Eserver\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ehost\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'0.0.0.0'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eport\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'7070'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 项目运行的端口号。注意：请写一个不容易被占用的端口号\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E在项目的根目录新建一个文件用于 pm2 配置： \u003Ccode\u003Eecosystem.config.js\u003C\u002Fcode\u003E 并在里面添加以下内容：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Emodule\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eexports\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Eapps\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'nuxt-blog'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F pm2 应用进程的名称\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eexec_mode\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'cluster'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动模式，这里选择集群\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Einstances\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'max'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动实例个数，这里选择最大，也可以填具体的数量\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Escript\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'.\u002Fnode_modules\u002Fnuxt\u002Fbin\u002Fnuxt.js'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 启动脚本路径\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eargs\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'start'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 传递给脚本的参数\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\".nuxt\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 .nuxt 文件夹，当里面内容更新时会自动重启应用\u003C\u002Fspan\u003E\n  \t  \u003Cspan class=\"token literal-property property\"\u003Ewatch_delay\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1500\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听延迟\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E接下来你需要把自己的项目上传到 github 上，这一步就不再赘述。\u003C\u002Fp\u003E\n\u003Cp\u003E项目上传成功后，我们切回到服务器的终端并进行以下操作：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E首先我们要通过 \u003Ccode\u003Egit clone\u003C\u002Fcode\u003E 命令把项目放到服务器端\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token comment\"\u003E#这里我选择在用户目录下新建一个 www 文件夹，并把项目放到里面，文件位置可以自行更改\u003C\u002Fspan\u003E\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E ~\n\u003Cspan class=\"token function\"\u003Emkdir\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E clone git@github.com:sechi747\u002Fnuxt-blog.git\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E项目拉下来之后，需要使用 npm 安装依赖并打包\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E nuxt-blog\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E i\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E run build\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E打包完成后，我们就可以使用 pm2 启动项目了\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Epm2 start\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E我们可以通过 \u003Ccode\u003Epm2 ls\u003C\u002Fcode\u003E 查看当前正在运行的应用状态， \u003Ccode\u003Epm2 logs\u003C\u002Fcode\u003E 查看日志\u003C\u002Fp\u003E\n\u003Cp\u003E最后，我们只需要配置一下 Nginx 就可以完成部署啦！\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fnginx\u002Fnginx.conf\u003C\u002Fcode\u003E 编辑 Nginx 配置\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Enginx -s reload \u003C\u002Fcode\u003E 在 Nginx 目录下运行此命令，重新启动 Nginx 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E贴出我自己的配置供参考：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Euser www-data\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\nworker_processes auto\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\npid \u002Frun\u002Fnginx.pid\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\ninclude \u002Fetc\u002Fnginx\u002Fmodules-enabled\u002F*.conf\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\nevents \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        worker_connections \u003Cspan class=\"token number\"\u003E768\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# multi_accept on;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\nhttp \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Basic Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        sendfile on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nopush on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nodelay on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        keepalive_timeout \u003Cspan class=\"token number\"\u003E65\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        types_hash_max_size \u003Cspan class=\"token number\"\u003E2048\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_tokens off;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# server_names_hash_bucket_size 64;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_name_in_redirect off;\u003C\u002Fspan\u003E\n\n        include \u002Fetc\u002Fnginx\u002Fmime.types\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        default_type application\u002Foctet-stream\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# SSL Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# Dropping SSLv3, ref: POODLE\u003C\u002Fspan\u003E\n        ssl_prefer_server_ciphers on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Logging Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        access_log \u002Fvar\u002Flog\u002Fnginx\u002Faccess.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        error_log \u002Fvar\u002Flog\u002Fnginx\u002Ferror.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Gzip Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# gzip_vary on;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_proxied any;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_comp_level 6;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_buffers 16 8k;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_http_version 1.1;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_types text\u002Fplain text\u002Fcss application\u002Fjson application\u002Fjavascript text\u002Fxml application\u002Fxml application\u002Fxml+rss text\u002Fjavascript;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Virtual Host Configs\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\t\t\n\t\t\u003Cspan class=\"token comment\"\u003E#注意！下面这两行要注释掉，否则80端口会一直被Nginx占用，导致下面自定义的sever配置不生效。\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fconf.d\u002F*.conf;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fsites-enabled\u002F*;\u003C\u002Fspan\u003E\n\n        map \u003Cspan class=\"token variable\"\u003E$sent_http_content_type\u003C\u002Fspan\u003E \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml\"\u003C\u002Fspan\u003E                 epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml; charset=utf-8\"\u003C\u002Fspan\u003E  epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                default                     off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        upstream webserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                server \u003Cspan class=\"token number\"\u003E127.0\u003C\u002Fspan\u003E.0.1:7070\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#项目的启动地址及端口号\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        server \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                listen          \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E             \u003Cspan class=\"token comment\"\u003E# 监听的端口\u003C\u002Fspan\u003E\n                server_name     http:\u002F\u002Fplantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E    \u003Cspan class=\"token comment\"\u003E# 域名\u003C\u002Fspan\u003E\n\n                \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E            on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_types      text\u002Fplain application\u002Fxml text\u002Fcss application\u002Fjavascript\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_min_length \u003Cspan class=\"token number\"\u003E1000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                location \u002F \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                        expires \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                        proxy_redirect                      off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header Host               \u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Real-IP          \u003Cspan class=\"token variable\"\u003E$remote_addr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-For    \u003Cspan class=\"token variable\"\u003E$proxy_add_x_forwarded_for\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-Proto  \u003Cspan class=\"token variable\"\u003E$scheme\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_read_timeout          1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_connect_timeout       1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_pass         http:\u002F\u002Fwebserver\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# 这里要填入上面的upstream\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成以上所有步骤后，打开浏览器，输入域名，你就可以看到自己的网站啦~\u003C\u002Fp\u003E\n\u003Cp\u003E虽然已经可以成功访问到网站了，但还是存在以下两个问题：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E网站使用的是 http 协议而不是 https 协议\u003C\u002Fli\u003E\n\u003Cli\u003E更新代码后每次都要手动在服务器端拉取代码并打包\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E后续有时间的话会把这两个坑给填上。\u003C\u002Fp\u003E\n",date:m,path:"\u002Fposts\u002F20220324-Ubuntu部署nuxt项目\u002F"}]}],keyword:a}],fetch:{},mutations:void 0}}("技术","2022\u002F08\u002F08 00:08:32","2022\u002F04\u002F18 23:01:40","2022\u002F04\u002F14 17:31:40","Vanilla JS","2022\u002F04\u002F12 14:12:40","2022\u002F04\u002F11 11:30:53","2022\u002F04\u002F02 17:14:53","2022\u002F04\u002F01 16:58:53","网站部署","2022\u002F03\u002F31 21:28:56","2022\u002F03\u002F28 10:58:00","2022\u002F03\u002F24 15:58:00")));