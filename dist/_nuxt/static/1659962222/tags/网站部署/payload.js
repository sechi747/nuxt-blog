__NUXT_JSONP__("/tags/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2", (function(a,b,c,d,e,f,g,h){e[0]={date:2022,articles:[{attributes:{title:"使用 Webhook 实现前端项目的自动化部署",date:b,updated:b,categories:[c],tags:[a]},html:"\u003Cp\u003E填一下上次部署网站遗留的坑：如何进行前端项目的自动化部署？\u003C\u002Fp\u003E\n\u003Cp\u003E自动化部署的解决方案有很多，比如 \u003Ccode\u003EJenkins\u003C\u002Fcode\u003E、\u003Ccode\u003EDrone\u003C\u002Fcode\u003E、\u003Ccode\u003EGitLab CI\u002FCD\u003C\u002Fcode\u003E、\u003Ccode\u003Ecron 定时任务\u003C\u002Fcode\u003E、\u003Ccode\u003EWebhook\u003C\u002Fcode\u003E等。最开始我尝试使用 Jenkins 进行自动化部署，但是配置到一半我发现 Jenkins 对于我来说太“重”了，绝大部分的功能对我来说都意义不大，毕竟我现在只是想自动化部署一个极其简单的博客，用上 Jenkins 有些买椟还珠了。后来我发现使用 cron 设置定时任务好像还挺简单的，但是有一个显而易见的缺点：无法判断是否需要重新部署，因此会进行很多无意义的操作。最后思来想去还是决定使用 Webhook 来进行自动化部署，它有很多的优点：配置简单，十分轻量，功能不局限于自动化部署。所以还是非常值得学习一下的。\u003C\u002Fp\u003E\n\u003Ch3\u003E什么是 Webhook？\u003C\u002Fh3\u003E\n\u003Cp\u003EWebhook 的概念早在 2007 年就被提出了（但我才刚知道有这么个概念），首先要说明一点，Webhook 并不是一种\u003Cstrong\u003E工具\u003C\u002Fstrong\u003E，而是一个\u003Cstrong\u003E概念\u003C\u002Fstrong\u003E或者说\u003Cstrong\u003E方法\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E简单理解的话，Webhook 就是一种反向 API 机制，类似于 trigger。API 的使用场景如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E服务器端提供一个 API\u003C\u002Fli\u003E\n\u003Cli\u003E客户端请求这 API\u003C\u002Fli\u003E\n\u003Cli\u003E服务器端接收到请求，并向客户端返回数据\u003C\u002Fli\u003E\n\u003Cli\u003E客户端拿到数据进行对应的处理\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E而 Webhook 的使用场景则相反：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E客户端给服务端提供一个 Webhook URL\u003C\u002Fli\u003E\n\u003Cli\u003E当某些事件被触发时，服务器端会主动向客户端提供的 URL 推送数据\u003C\u002Fli\u003E\n\u003Cli\u003E客户端拿到数据进行对应的处理\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E其实就是客户端由原本的主动请求者变为了被动接收者。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401144700498.png\" alt=\"image-20220401144700498\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EWebhook 的应用场景\u003C\u002Fh3\u003E\n\u003Cp\u003EWebhook 的应用场景非常广泛，比如安全性要求非常高的支付功能，第三方平台的鉴权、登录，资源同步等。\u003C\u002Fp\u003E\n\u003Cp\u003E想象一下这个场景：客户端现在向服务器端上传了一个比较大的文件，而这个文件需要在服务器端进行处理之后才返回给客户端，恰巧这时候服务器端有很多的文件待处理，需要排队等待。如果按照传统做法，客户端需要不断地轮询服务器来获取文件的处理状态，但如果使用 Webhook 就不需要再进行轮询了，只需要让服务器端在完成处理后向客户端提供的 Webhook URL 发送一个请求并返回处理后的文件就可以了。be like:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401152951862.png\" alt=\"image-20220401152951862\"\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E使用 Webhook 实现自动化部署\u003C\u002Fh3\u003E\n\u003Cp\u003E简单介绍完 Webhook 之后，我们开始回归正题：自动化部署。\u003C\u002Fp\u003E\n\u003Cp\u003EGitHub 本身就提供了 Webhook 的设置，所以我们可以很方便的监听远程仓库的各种事件，比如 \u003Ccode\u003Epush\u003C\u002Fcode\u003E, \u003Ccode\u003Efolk\u003C\u002Fcode\u003E, \u003Ccode\u003Epull-request\u003C\u002Fcode\u003E 等。所以我们可以大体想到这么一个方案：在服务器上搭建一个 Node 服务用来监听 GitHub 发送过来的信息，每当远程仓库有 commit 时就让 GitHub 向我们的服务器发送一个请求，服务器接收到请求后会自动运行提前准备好的 bash 脚本，完成项目的自动化部署。有了思路之后我们开始一步步进行。\u003C\u002Fp\u003E\n\u003Ch4\u003E搭建 Node 服务\u003C\u002Fh4\u003E\n\u003Cp\u003E秉承“尽量不要重复造轮子”的原则，我们可以使用\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Frvagg\u002Fgithub-webhook-handler\"\u003E一个已经封装好的库\u003C\u002Fa\u003E进行 Webhook 的处理，这个库的代码并不多，逻辑也比较容易懂，建议读一读。\u003C\u002Fp\u003E\n\u003Cp\u003E首先在服务器上创建 Node 服务的根目录，然后在根目录下运行 \u003Ccode\u003Enpm init -y\u003C\u002Fcode\u003E 进行初始化，运行 \u003Ccode\u003Enpm i github-webhook-handler\u003C\u002Fcode\u003E 安装依赖，安装完成后，我们可以在根目录创建一个 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 文件，并写入以下内容：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E http \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'http'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E createHandler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'github-webhook-handler'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E handler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EcreateHandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Epath\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'\u002Fwebhook'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Esecret\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'yourSecret'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F secret 相当于一个密码，可以自行设置\u003C\u002Fspan\u003E\n\nhttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EcreateServer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EstatusCode\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E404\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'no such location'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elisten\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E7777\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'server listening on port 7777'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'error'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Error:'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 push 事件 \u003C\u002Fspan\u003E\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'push'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003EReceived a push event from \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Erepository\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E to \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E接着我们可以使用 pm2 启动服务器 \u003Ccode\u003Epm2 start index.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E启动完成后我们就需要到 GitHub 上设置 Webhook 了\u003C\u002Fp\u003E\n\u003Ch4\u003EWebhook 设置\u003C\u002Fh4\u003E\n\u003Cp\u003E首先进入到代码所在的 GitHub 仓库，点击 \u003Ccode\u003ESetting\u003C\u002Fcode\u003E，找到 \u003Ccode\u003EWebhooks\u003C\u002Fcode\u003E 选项卡，点击 \u003Ccode\u003EAdd webhook\u003C\u002Fcode\u003E 来新建一个 Webhook\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401160047209.png\" alt=\"image-20220401160047209\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E新建界面如下：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401160329887.png\" alt=\"image-20220401160329887\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EPayload URL\u003C\u002Fcode\u003E 就是我们的服务器的请求路径，也就是服务器 IP 地址，加上我们上面设置的端口号最后加上我们设置的 \u003Ccode\u003Epath\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EContent type\u003C\u002Fcode\u003E 一定要选择 \u003Ccode\u003Eapplication\u002Fjson\u003C\u002Fcode\u003E，这一点在 \u003Ccode\u003Egithub-webhook-handler\u003C\u002Fcode\u003E 的文档中也有提到。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003ESecret\u003C\u002Fcode\u003E 就是我们之前设置的 \u003Ccode\u003Esecret\u003C\u002Fcode\u003E，保持一致就可以了。\u003C\u002Fp\u003E\n\u003Cp\u003E因为我们只需要自动化部署的功能，所以只需要监听 \u003Ccode\u003Epush\u003C\u002Fcode\u003E 事件就可以了。日志也勾上，里面会有很多 Webhook 的配置，可以拿来参考做一些自定义的东西。\u003C\u002Fp\u003E\n\u003Cp\u003E创建完成后，GitHub 会自动测试 Webhook 的可用性，如果显示的是绿色对号，那说明我们的配置没有问题，但如果是红色叉号，那就说明我们的配置存在问题，这里有一个小坑，如果你直接去修改这个 Webhook 的配置，即使修改正确这里的状态也不会改变，因为 GitHub 只会在创建 Webhook 的时候进行连接测试，所以如果你想知道自己修改后的配置是否正确，建议删除原来的 Webhook 然后重新创建，这时候就能知道修改后的配置是否正确了。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fpic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com\u002Fimg\u002Fimage-20220401162119764.png\" alt=\"image-20220401162119764\"\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E编写部署脚本\u003C\u002Fh4\u003E\n\u003Cp\u003E现在我们已经可以监听远程仓库的 \u003Ccode\u003Epush\u003C\u002Fcode\u003E 事件了，所以我们只需要在接收事件后运行一下脚本就可以实现自动化部署啦~将 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 的内容稍作修改：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E http \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'http'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E spawn \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'child_process'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Espawn\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E createHandler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'github-webhook-handler'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E handler \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EcreateHandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Epath\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'\u002Fwebhook'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token literal-property property\"\u003Esecret\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'yourSecret'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F secret 相当于一个密码，可以自行设置\u003C\u002Fspan\u003E\n\nhttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EcreateServer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ereq\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E res\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003EstatusCode\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E404\u003C\u002Fspan\u003E\n    res\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'no such location'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elisten\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E7777\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'server listening on port 7777'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'error'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eerr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Error:'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 push 事件 \u003C\u002Fspan\u003E\nhandler\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'push'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \n  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token template-string\"\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003EReceived a push event from \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Erepository\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E to \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E${\u003C\u002Fspan\u003Eevent\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Epayload\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation-punctuation punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token template-punctuation string\"\u003E`\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003ErunCmd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'sh'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'.\u002Fdeploy.sh'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Etext\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E  \u003Cspan class=\"token console class-name\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etext\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 运行命令\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ErunCmd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ecmd\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E args\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E callback\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E child \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Espawn\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecmd\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E args\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E resMsg \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Deploy End\"\u003C\u002Fspan\u003E\n\n  child\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Estdout\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'data'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Ebuffer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E resMsg \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E buffer\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003EtoString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n  child\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Estdout\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token method function property-access\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'end'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token arrow operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Ecallback\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EresMsg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后在 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E 的同级目录下新建 \u003Ccode\u003Edeploy.sh\u003C\u002Fcode\u003E 文件：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-sh\"\u003E\u003Ccode class=\"language-sh\"\u003Eecho &quot;Start deployment&quot;\ncd ~\u002Fwww\u002Fnuxt-blog\necho &quot;stop process&quot;\npm2 stop nuxt-blog\necho &quot;pulling source code...&quot;\ngit pull\necho &quot;check dependencies&quot;\nnpm install\necho &quot;build \u002F.nuxt&quot;\nnpm run build\necho &quot;start process&quot;\npm2 start\necho &quot;Finished.&quot;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E脚本的内容仅供参考，请自行修改\u003C\u002Fp\u003E\n\u003Cp\u003E完成以上步骤之后，我们可以自行测试一下（测试前不要忘记重启服务），本地向远程仓库提交一些修改，比如样式的修改等，然后过一小会去访问网站看一下修改是否生效。\u003C\u002Fp\u003E\n\u003Cp\u003E至此，我们已经完成了自动化部署的需求，其实 Webhook 的用途还有很多，比如有人向仓库提了 \u003Ccode\u003Eissue\u003C\u002Fcode\u003E 可以自动给我们发送提醒邮件，或者也可以通过一些第三方的平台进行个性化提醒，例如钉钉的智能机器人。建议有时间的话可以多多探索~\u003C\u002Fp\u003E\n",date:b,path:"\u002Fposts\u002F20220401-使用Webhook实现自动化部署\u002F"},{attributes:{title:"通过 Nginx 把网站改为 HTTPS 协议",date:d,updated:d,categories:[c],tags:[a]},html:"\u003Cp\u003E填一下上次部署网站遗留的坑：如何使用 Nginx 安装 SSL 证书，从而使网站的协议由 http 变为 https\u003C\u002Fp\u003E\n\u003Ch3\u003E前期准备\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003E首先，我们需要给我们的域名申请 SSL 证书，既有免费证书，也有付费证书，一般来讲免费证书就已经够用了，所以在这里只介绍免费证书的申请方法。\u003Cbr\u003E\n这里建议去\u003Ca href=\"https:\u002F\u002Fhomenew.console.aliyun.com\u002Fhome\u002Fdashboard\u002FProductAndService\"\u003E阿里云\u003C\u002Fa\u003E或\u003Ca href=\"https:\u002F\u002Fconsole.cloud.tencent.com\u002Fcertoverview\"\u003E腾讯云\u003C\u002Fa\u003E申请证书（我选择的是腾讯云，所以下述步骤以腾讯云为准），申请步骤非常简单，只需要填上一些必要的信息（域名、邮箱等）就可以申请，大概 1-10 分钟就可以拿到证书啦。\u003C\u002Fli\u003E\n\u003Cli\u003E申请完成后我们可以在证书管理界面下载证书，下载的格式选择 Nginx，解压后可以得到四个文件:\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top_bundle.crt\u003C\u002Fcode\u003E 证书文件\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top_bundle.pem\u003C\u002Fcode\u003E 证书文件（安装时可忽略该文件）\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top.key\u003C\u002Fcode\u003E 私钥文件\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eplantsechi.top.csr\u003C\u002Fcode\u003E CSR 文件（安装时可忽略该文件）\u003Cbr\u003E\n其实安装证书的过程中真正用到的只有 \u003Ccode\u003Ecrt\u003C\u002Fcode\u003E 文件和 \u003Ccode\u003Ekey\u003C\u002Fcode\u003E 文件\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E有了证书之后我们需要把它们上传到服务器上，这里我使用的是 XFTP 进行文件上传。首先我们需要在 Nginx 的根目录新建一个文件夹存放证书，然后把两个文件放到该文件夹内。最终达到的效果：\u003Ccode\u003E\u002Fetc\u002Fnginx\u002Fcert\u003C\u002Fcode\u003E 中存放了 \u003Ccode\u003Eplantsechi.top_bundle.crt\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eplantsechi.top.key\u003C\u002Fcode\u003E 两个文件。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003ENginx 配置\u003C\u002Fh3\u003E\n\u003Cp\u003E进行完以上操作后，我们需要修改一下 Nginx 的配置，下面放出我的部分配置供参考：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Eupstream webserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\t\tserver \u003Cspan class=\"token number\"\u003E127.0\u003C\u002Fspan\u003E.0.1:7070\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\tserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n   \t\t\tlisten \u003Cspan class=\"token number\"\u003E443\u003C\u002Fspan\u003E ssl\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tserver_name plantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#域名\u003C\u002Fspan\u003E\n    \t\tssl_certificate  \u002Fetc\u002Fnginx\u002Fcert\u002Fplantsechi.top_bundle.crt\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#证书文件的路径\u003C\u002Fspan\u003E\n    \t\tssl_certificate_key \u002Fetc\u002Fnginx\u002Fcert\u002Fplantsechi.top.key\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#私钥文件的路径\u003C\u002Fspan\u003E\n    \t\tssl_session_timeout 5m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n   \t\t\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003ENULL:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EaNULL:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EMD5:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003EADH:\u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003ERC4\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tssl_protocols TLSv1.2 TLSv1.3\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tssl_prefer_server_ciphers on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n    \t\t\u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E            on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tgzip_types      text\u002Fplain application\u002Fxml text\u002Fcss application\u002Fjavascript\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tgzip_min_length \u003Cspan class=\"token number\"\u003E1000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n    \t\tlocation \u002F \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        \t\t\texpires \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_redirect                      off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header Host               \u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Real-IP          \u003Cspan class=\"token variable\"\u003E$remote_addr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Forwarded-For    \u003Cspan class=\"token variable\"\u003E$proxy_add_x_forwarded_for\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_set_header X-Forwarded-Proto  \u003Cspan class=\"token variable\"\u003E$scheme\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_read_timeout          1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_connect_timeout       1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \t\t\tproxy_pass         http:\u002F\u002Fwebserver\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \n    \t\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成以上配置就可以通过 https 协议访问网站啦~但是还是有一些地方不太完美，如果在浏览器依旧输入 http 协议的 URL，依旧会使用 http 协议，所以我们需要让网站的 http 请求自动重定向到 https，该功能同样可以通过 Nginx 实现，只需要再额外监听 80 端口就可以实现：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\tserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \t\tlisten \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \t\tserver_name plantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \n    \t\t\u003Cspan class=\"token builtin class-name\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E301\u003C\u002Fspan\u003E https:\u002F\u002F\u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token variable\"\u003E$request_uri\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#将默认 80 端口的请求重定向为 https\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E至此，我们已经成功将网站的协议改为 https，还是挺简单的~\u003C\u002Fp\u003E\n",date:d,path:"\u002Fposts\u002F20220328-通过Nginx把网站改为HTTPS协议\u002F"},{attributes:{title:"从零开始在 Ubuntu 上部署 Nuxt 项目",date:f,updated:"2022\u002F03\u002F28 10:05:00",categories:[c],tags:[g,h,a]},html:"\u003Ch2\u003E前置工作\u003C\u002Fh2\u003E\n\u003Cp\u003E部署使用的 Ubuntu 版本：Ubuntu 20.04.4 LTS (GNU\u002FLinux 5.4.0-96-generic x86_64)\u003C\u002Fp\u003E\n\u003Cp\u003E整个部署过程我都是使用 root 用户进行操作，所以不会有权限问题，但如果你是使用其他用户进行操作，则需要注意权限问题，适时给命令加上 \u003Ccode\u003Esudo\u003C\u002Fcode\u003E 前缀\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 npm\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install npm\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm config set registry https:\u002F\u002Fregistry.npmmirror.com\u003C\u002Fcode\u003E 配置国内 npm 镜像\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 n\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g n\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E使用 n 安装 node\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003En lts\u003C\u002Fcode\u003E  安装 node 的长期支持版\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En 14.17.6\u003C\u002Fcode\u003E 安装特定版本的 node（此处仅做演示，请根据实际需求安装特定的 node 版本）\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003En\u003C\u002Fcode\u003E 切换当前 node 版本，切换的同时 npm 版本也会改变。可以通过 \u003Ccode\u003Enode -v\u003C\u002Fcode\u003E 查看当前 node 版本\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 pm2\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Ccode\u003Enpm i -g pm2\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E安装并配置 git\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Eapt install git\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.name \u003Cspan class=\"token string\"\u003E'用户名'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E config --global user.email \u003Cspan class=\"token string\"\u003E'邮箱'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Essh-keygen -C '邮箱' -t rsa\u003C\u002Fcode\u003E  默认生成目录为 \u003Ccode\u003E~\u002F.ssh\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003Ecat ~\u002F.ssh\u002Fid_rsa.pub\u003C\u002Fcode\u003E 复制 ssh key 并将其加入 github 的设置中\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E单独说一下我遇到的问题：在进行完以上步骤后，我尝试使用 \u003Ccode\u003Egit clone git@github.com:sechi747\u002Fnuxt-blog.git \u003C\u002Fcode\u003E 命令拉取我的个人仓库，结果失败了。错误信息如下：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Ekex_exchange_identification: read: Connection reset by peer\nfatal: Could not \u003Cspan class=\"token builtin class-name\"\u003Eread\u003C\u002Fspan\u003E from remote repository\n\nPlease \u003Cspan class=\"token function\"\u003Emake\u003C\u002Fspan\u003E sure you have the correct access rights\nand the repository exists\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E尝试了许多种方法进行解决，包括但不限于：重装系统，重新生成 ssh key，根据 github 官方的指南一步一步进行操作等都没有起作用。下面是我最终的解决方法。\u003C\u002Fp\u003E\n\u003Cp\u003E进入到 \u003Ccode\u003E.ssh\u003C\u002Fcode\u003E 文件夹下，新建 \u003Ccode\u003Econfig\u003C\u002Fcode\u003E 文件（如果有就不用建了，直接修改就可以），添加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003EHost github.com\nHostname ssh.github.com\nPort \u003Cspan class=\"token number\"\u003E443\u003C\u002Fspan\u003E\nUser \u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后再进行 \u003Ccode\u003Egit\u003C\u002Fcode\u003E 操作就不会有问题了。造成这个现象的原因暂时不清楚，等有空再细查吧。\u003C\u002Fp\u003E\n\u003Ch4\u003E安装 Nginx\u003C\u002Fh4\u003E\n\u003Cp\u003E此处安装的 Nginx 版本为：nginx\u002F1.18.0 (Ubuntu)\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install nginx\u003C\u002Fcode\u003E 安装 Nginx\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eservice nginx start\u003C\u002Fcode\u003E 启动 Nginx\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 MySQL\u003C\u002Fh4\u003E\n\u003Cp\u003E其实我的博客项目并不涉及数据库，但是为了熟悉 Linux 操作还是装上吧~\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 MySQL 版本为：8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Eapt install mysql-server\u003C\u002Fcode\u003E 安装 MySQL\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl status mysql.service\u003C\u002Fcode\u003E 看一下有没有安装成功\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Emysql -u root -p\u003C\u002Fcode\u003E 因为安装时并没有要求设置密码，所以密码默认为空，直接敲回车就能进入控制台了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Euse mysql;\u003C\u002Fcode\u003E 切换到 mysql 数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ealter user 'root'@'localhost' identified with mysql_native_password by '密码';\u003C\u002Fcode\u003E  修改 root 账号的密码加密方式和密码，这样就可以在客户端使用密码连接数据库了\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Egrant all on *.* to 'root'@'localhost';\u003C\u002Fcode\u003E 使外网可以访问到数据库\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fmysql\u002Fmysql.conf.d\u002Fmysqld.cnf\u003C\u002Fcode\u003E 将里面的\u003Ccode\u003Ebind-address\u003C\u002Fcode\u003E 和 \u003Ccode\u003Emysqlx-bind-address\u003C\u002Fcode\u003E 修改为 \u003Ccode\u003E0.0.0.0\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esystemctl restart mysql\u003C\u002Fcode\u003E 重启 MySQL 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E安装 Docker\u003C\u002Fh4\u003E\n\u003Cp\u003Edocker 肯定是会用到的，虽然我现在没用到~ 这里直接把官网的安装教程搬过来\u003C\u002Fp\u003E\n\u003Cp\u003E此处安装的 Docker 版本为：20.10.14, build a224086\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E安装一些必要的包\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E ca-certificates \u003Cspan class=\"token function\"\u003Ecurl\u003C\u002Fspan\u003E gnupg lsb-release\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E\n\u003Cp\u003E添加 docker 官方的 GPG 密钥\u003Cbr\u003E\n\u003Ccode\u003Ecurl -fsSL https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu\u002Fgpg | sudo gpg --dearmor -o \u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E设置稳定版的 docker 仓库\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E\\\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token string\"\u003E\"deb [arch=\u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Edpkg --print-architecture\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E signed-by=\u002Fusr\u002Fshare\u002Fkeyrings\u002Fdocker-archive-keyring.gpg] https:\u002F\u002Fdownload.docker.com\u002Flinux\u002Fubuntu \\\n  \u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003Elsb_release -cs\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E stable\"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E|\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Esudo\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Etee\u003C\u002Fspan\u003E \u002Fetc\u002Fapt\u002Fsources.list.d\u002Fdocker.list \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u002Fdev\u002Fnull\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E安装 docker 引擎\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E update\n\u003Cspan class=\"token function\"\u003Eapt\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E docker-ce docker-ce-cli containerd.io\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E验证安装是否成功\u003Cbr\u003E\n\u003Ccode\u003Edocker run hello-world\u003C\u002Fcode\u003E\u003Cbr\u003E\n由于我们本地是没有 hello-world 这个镜像的，所以会去服务器 pull，如果发现成功运行了 hello-world 镜像，出现了 Hello from Docker 的，那么就算是安装成功啦！\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E配置 docker 镜像加速源\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token function\"\u003Evim\u003C\u002Fspan\u003E \u002Fetc\u002Fdocker\u002Fdaemon.json\n\n\u003Cspan class=\"token comment\"\u003E#在文件中添加以下内容\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n   \u003Cspan class=\"token string\"\u003E\"registry-mirrors\"\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin class-name\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n       \u003Cspan class=\"token string\"\u003E\"https:\u002F\u002Fmirror.ccs.tencentyun.com\"\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E#添加完成后执行下面的命令重启 docker 服务器\u003C\u002Fspan\u003E\nsystemctl restart \u003Cspan class=\"token function\"\u003Edocker\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E由于 DockerHub 部署在国外，如果直接使用 \u003Ccode\u003Edocker pull\u003C\u002Fcode\u003E 拉取镜像速度会比较慢，所以推荐配置一下 Docker镜像加速源，这里我选择的是腾讯云提供的加速源。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003E项目部署\u003C\u002Fh2\u003E\n\u003Cp\u003E经过了上面的一系列准备，终于可以开始正式部署啦！\u003C\u002Fp\u003E\n\u003Cp\u003Enuxt 官网提供了两种部署方式，一种是使用 \u003Ccode\u003Enpm run build &amp; npm run start\u003C\u002Fcode\u003E 进行 ssr 部署，另一种是使用 \u003Ccode\u003Enpm run generate \u003C\u002Fcode\u003E 进行静态应用部署，这里我选择的是 ssr 部署。\u003C\u002Fp\u003E\n\u003Cp\u003E在部署之前，我们需要在项目中增加一些配置。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E在 \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E 中增加以下配置：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E  \u003Cspan class=\"token literal-property property\"\u003Eserver\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Ehost\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'0.0.0.0'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token literal-property property\"\u003Eport\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'7070'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 项目运行的端口号。注意：请写一个不容易被占用的端口号\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E在项目的根目录新建一个文件用于 pm2 配置： \u003Ccode\u003Eecosystem.config.js\u003C\u002Fcode\u003E 并在里面添加以下内容：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Emodule\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token property-access\"\u003Eexports\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token literal-property property\"\u003Eapps\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'nuxt-blog'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F pm2 应用进程的名称\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eexec_mode\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'cluster'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动模式，这里选择集群\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Einstances\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'max'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 应用启动实例个数，这里选择最大，也可以填具体的数量\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Escript\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'.\u002Fnode_modules\u002Fnuxt\u002Fbin\u002Fnuxt.js'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 启动脚本路径\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Eargs\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'start'\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 传递给脚本的参数\u003C\u002Fspan\u003E\n      \u003Cspan class=\"token literal-property property\"\u003Ewatch\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\".nuxt\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听 .nuxt 文件夹，当里面内容更新时会自动重启应用\u003C\u002Fspan\u003E\n  \t  \u003Cspan class=\"token literal-property property\"\u003Ewatch_delay\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1500\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 监听延迟\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E接下来你需要把自己的项目上传到 github 上，这一步就不再赘述。\u003C\u002Fp\u003E\n\u003Cp\u003E项目上传成功后，我们切回到服务器的终端并进行以下操作：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E首先我们要通过 \u003Ccode\u003Egit clone\u003C\u002Fcode\u003E 命令把项目放到服务器端\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token comment\"\u003E#这里我选择在用户目录下新建一个 www 文件夹，并把项目放到里面，文件位置可以自行更改\u003C\u002Fspan\u003E\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E ~\n\u003Cspan class=\"token function\"\u003Emkdir\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E www\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E clone git@github.com:sechi747\u002Fnuxt-blog.git\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E项目拉下来之后，需要使用 npm 安装依赖并打包\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E nuxt-blog\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E i\n\u003Cspan class=\"token function\"\u003Enpm\u003C\u002Fspan\u003E run build\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E打包完成后，我们就可以使用 pm2 启动项目了\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Epm2 start\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E我们可以通过 \u003Ccode\u003Epm2 ls\u003C\u002Fcode\u003E 查看当前正在运行的应用状态， \u003Ccode\u003Epm2 logs\u003C\u002Fcode\u003E 查看日志\u003C\u002Fp\u003E\n\u003Cp\u003E最后，我们只需要配置一下 Nginx 就可以完成部署啦！\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Evim \u002Fetc\u002Fnginx\u002Fnginx.conf\u003C\u002Fcode\u003E 编辑 Nginx 配置\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Enginx -s reload \u003C\u002Fcode\u003E 在 Nginx 目录下运行此命令，重新启动 Nginx 服务\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E贴出我自己的配置供参考：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-shell\"\u003E\u003Ccode class=\"language-shell\"\u003Euser www-data\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\nworker_processes auto\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\npid \u002Frun\u002Fnginx.pid\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\ninclude \u002Fetc\u002Fnginx\u002Fmodules-enabled\u002F*.conf\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\nevents \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n        worker_connections \u003Cspan class=\"token number\"\u003E768\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# multi_accept on;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\nhttp \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Basic Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        sendfile on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nopush on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        tcp_nodelay on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        keepalive_timeout \u003Cspan class=\"token number\"\u003E65\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        types_hash_max_size \u003Cspan class=\"token number\"\u003E2048\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_tokens off;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# server_names_hash_bucket_size 64;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# server_name_in_redirect off;\u003C\u002Fspan\u003E\n\n        include \u002Fetc\u002Fnginx\u002Fmime.types\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        default_type application\u002Foctet-stream\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# SSL Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# Dropping SSLv3, ref: POODLE\u003C\u002Fspan\u003E\n        ssl_prefer_server_ciphers on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Logging Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        access_log \u002Fvar\u002Flog\u002Fnginx\u002Faccess.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        error_log \u002Fvar\u002Flog\u002Fnginx\u002Ferror.log\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Gzip Settings\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E# gzip_vary on;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_proxied any;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_comp_level 6;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_buffers 16 8k;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_http_version 1.1;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# gzip_types text\u002Fplain text\u002Fcss application\u002Fjson application\u002Fjavascript text\u002Fxml application\u002Fxml application\u002Fxml+rss text\u002Fjavascript;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# Virtual Host Configs\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E##\u003C\u002Fspan\u003E\n\t\t\n\t\t\u003Cspan class=\"token comment\"\u003E#注意！下面这两行要注释掉，否则80端口会一直被Nginx占用，导致下面自定义的sever配置不生效。\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fconf.d\u002F*.conf;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E#include \u002Fetc\u002Fnginx\u002Fsites-enabled\u002F*;\u003C\u002Fspan\u003E\n\n        map \u003Cspan class=\"token variable\"\u003E$sent_http_content_type\u003C\u002Fspan\u003E \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml\"\u003C\u002Fspan\u003E                 epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token string\"\u003E\"text\u002Fhtml; charset=utf-8\"\u003C\u002Fspan\u003E  epoch\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                default                     off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        upstream webserver \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                server \u003Cspan class=\"token number\"\u003E127.0\u003C\u002Fspan\u003E.0.1:7070\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E#项目的启动地址及端口号\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\n        server \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                listen          \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E             \u003Cspan class=\"token comment\"\u003E# 监听的端口\u003C\u002Fspan\u003E\n                server_name     http:\u002F\u002Fplantsechi.top\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E    \u003Cspan class=\"token comment\"\u003E# 域名\u003C\u002Fspan\u003E\n\n                \u003Cspan class=\"token function\"\u003Egzip\u003C\u002Fspan\u003E            on\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_types      text\u002Fplain application\u002Fxml text\u002Fcss application\u002Fjavascript\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                gzip_min_length \u003Cspan class=\"token number\"\u003E1000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                location \u002F \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n                        expires \u003Cspan class=\"token variable\"\u003E$expires\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n                        proxy_redirect                      off\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header Host               \u003Cspan class=\"token variable\"\u003E$host\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Real-IP          \u003Cspan class=\"token variable\"\u003E$remote_addr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-For    \u003Cspan class=\"token variable\"\u003E$proxy_add_x_forwarded_for\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_set_header X-Forwarded-Proto  \u003Cspan class=\"token variable\"\u003E$scheme\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_read_timeout          1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_connect_timeout       1m\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n                        proxy_pass         http:\u002F\u002Fwebserver\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E# 这里要填入上面的upstream\u003C\u002Fspan\u003E\n                \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E完成以上所有步骤后，打开浏览器，输入域名，你就可以看到自己的网站啦~\u003C\u002Fp\u003E\n\u003Cp\u003E虽然已经可以成功访问到网站了，但还是存在以下两个问题：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E网站使用的是 http 协议而不是 https 协议\u003C\u002Fli\u003E\n\u003Cli\u003E更新代码后每次都要手动在服务器端拉取代码并打包\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E后续有时间的话会把这两个坑给填上。\u003C\u002Fp\u003E\n",date:f,path:"\u002Fposts\u002F20220324-Ubuntu部署nuxt项目\u002F"}]};return {data:[{archives:e,keyword:a}],fetch:{"data-v-28ad35dd:0":{tags:["起始",g,h,a,"图床","Vanilla JS","生活","读书笔记","Flutter","Dart","强说愁","Vue"],archives:e,keyword:a}},mutations:void 0}}("网站部署","2022\u002F04\u002F01 16:58:53","技术","2022\u002F03\u002F28 10:58:00",Array(1),"2022\u002F03\u002F24 15:58:00","Linux","Nuxt")));