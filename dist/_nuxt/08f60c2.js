(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{376:function(n,t){n.exports={attributes:{title:"常见 ES6 语法的简单用法",date:"2022/04/02 17:14:53",updated:"2022/04/02 17:14:53",categories:["技术"],tags:["Vanilla JS"]},html:'<p>本文总结于 2021年12月17日，用法比较偏基础，并没有什么实际的干货，唯一的价值可能就是让我的博客数量 +1~</p>\n<h4>一、解构赋值</h4>\n<p>&lt;1&gt; 对象和数组</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token comment">// 等价于 const a = 1; const b = 2; const c = 3;</span>\n<span class="token doc-comment comment">/********************************/</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr <span class="token comment">// 等价于 const a = 1; const b = 2; const c = 3;</span>\n</code></pre>\n<p>&lt;2&gt; 深度解构</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> c <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token comment">// 等价于 const c = 1    tip: b is not defined</span>\n</code></pre>\n<p>&lt;3&gt; 解构时使用别名</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> count<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token comment">// 等价于 const count = 1</span>\n</code></pre>\n<p>&lt;5&gt; 变量互换</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span>\n</code></pre>\n<p>&lt;5&gt; 解构的对象不能为 <code>undefined</code> 或 <code>null</code></p>\n<p><code>const {a, b, c} = obj || {}</code></p>\n<h4>二、...(拓展运算符)</h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token comment">// const mixArr = [...newSet(arr1.concat(arr2))]</span>\n<span class="token keyword">const</span> mixArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token spread operator">...</span>a<span class="token punctuation">,</span><span class="token spread operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> \n<span class="token doc-comment comment">/********************************/</span>\n<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token comment">// const mixObj = Object.assign({}, obj1, obj2)</span>\n<span class="token keyword">const</span> mixObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1<span class="token punctuation">,</span> <span class="token spread operator">...</span>obj2 <span class="token punctuation">}</span>\n</code></pre>\n<p>结合拓展运算符有条件的添加对象的属性：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 此处可以将 isEmpty 封装为函数</span>\n<span class="token comment">/*\n\tconst isEmpty = (field) => this[field] === \'\'\n*/</span>\n<span class="token keyword">const</span> isEmpty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">keyword</span> <span class="token operator">===</span> <span class="token string">\'\'</span>\n<span class="token keyword">const</span> searchCondition <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token spread operator">...</span><span class="token punctuation">(</span>isEmpty <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">keyword</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4>三、Object.hasOwn</h4>\n<p>用于判断对象上是否存在某个属性（需要注意兼容性，最好配合 polyfill 使用）</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'sehci\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span>\n<span class="token punctuation">}</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token comment">// Object.hasOwn 本质上是语法糖，等价于以下代码</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre>\n<h4>四、includes</h4>\n<p><code>includes</code> 是数组上的一个方法，用于判断一个数组是否包含一个指定的值，返回值为 <code>boolean</code></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// bad</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// good</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>includes</code> 可以接收两个参数： &lt;1&gt; <code>valueToFind</code> 需要查找的元素值 &lt;2&gt; <code>fromIndex</code> 从某个索引开始遍历查找</p>\n<p>需要注意的地方是 <code>fromIndex</code> 可以为负数</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// arr\'s length is 3</span>\n<span class="token comment">// fromIndex is -100</span>\n<span class="token comment">// computed index is 3 + (-100) = -97</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\narr<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\narr<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre>\n<h4>五、?. (可选链操作符)</h4>\n<p>可选链操作符( <strong><code>?.</code></strong> )允许读取位于对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'sechi\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">cat</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'kiki\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> dogName <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token property-access">dog</span> <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span><span class="token property-access">dog</span><span class="token punctuation">.</span><span class="token property-access">name</span>\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> dogName <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token property-access">dog</span><span class="token operator">?.</span>name\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dogName<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre>\n<p>可选链操作符不仅能用于对象，还可以用于函数的调用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> someInterface <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">someMethod</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token string">\'call successfully!\'</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> someInterface<span class="token punctuation">.</span><span class="token property-access">anotherMethod</span><span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> someInterface<span class="token punctuation">.</span><span class="token method function property-access">anotherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// someInterface.anotherMethod is not a function</span>\n</code></pre>\n<h4>六、??(空值合并运算符)</h4>\n<p>空值合并操作符（<code>??</code>）是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。<strong>注意：它和逻辑或操作符(<code>||</code>)不同，逻辑或操作符会在左侧操作数为假值（如<code>false</code>, <code>0</code>,  <code>\'\'</code>, <code>NaN</code>）时返回右侧操作数。</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> nullValue <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n<span class="token keyword">const</span> emptyString <span class="token operator">=</span> <span class="token string">""</span> <span class="token comment">// 空字符串，是一个假值，Boolean("") === false</span>\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">42</span>\n\n<span class="token keyword">const</span> valA <span class="token operator">=</span> nullValue <span class="token operator">??</span> <span class="token string">"valA 的默认值"</span>\n<span class="token keyword">const</span> valB <span class="token operator">=</span> emptyString <span class="token operator">??</span> <span class="token string">"valB 的默认值"</span>\n<span class="token keyword">const</span> valC <span class="token operator">=</span> num <span class="token operator">??</span> <span class="token number">0</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>valA<span class="token punctuation">)</span> <span class="token comment">// "valA 的默认值"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>valB<span class="token punctuation">)</span> <span class="token comment">// ""（空字符串虽然是假值，但不是 null 或者 undefined）</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>valC<span class="token punctuation">)</span> <span class="token comment">// 42</span>\n</code></pre>\n<p>实际开发中可以用它来简化输入框的非空判断：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// bad</span>\n<span class="token keyword control-flow">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword null nil">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword nil">undefined</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// good</span>\n<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">??</span><span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Tip:  <code>??</code> 不可以直接与 <code>&amp;&amp;</code> 和 <code>||</code> 组合使用，原因是空值合并操作符和其他逻辑操作符之间的运算优先级/运算顺序是未定义的。组合使用时需要使用括号来显式地表明优先级</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword null nil">null</span> <span class="token operator">||</span> <span class="token keyword nil">undefined</span> <span class="token operator">??</span> <span class="token string">"foo"</span> <span class="token comment">// 抛出 SyntaxError</span>\n<span class="token punctuation">(</span><span class="token keyword null nil">null</span> <span class="token operator">||</span> <span class="token keyword nil">undefined</span> <span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">"foo"</span> <span class="token comment">// 返回 "foo"</span>\n</code></pre>\n<h4>七、Object.entries / Object.keys / Object.values / Object.fromEntries</h4>\n<p>Object.entries / Object.keys / Object.values 这三个方法都可以将对象转换为数组，并且只会遍历自身的属性而不会遍历原型链中的属性。</p>\n<p>&lt;1&gt; <strong><code>Object.entries()</code><strong>方法返回一个给定对象自身可枚举属性的</strong>键值对</strong>数组。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 简单示例</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'c\'</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ [\'0\', \'a\'], [\'1\', \'b\'], [\'2\', \'c\'] ]</span>\n\n<span class="token comment">// 如果 key 可以被排序，那么遍历的顺序会由 key 决定</span>\n<span class="token keyword">const</span> anObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token string">\'c\'</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>anObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ [\'2\', \'b\'], [\'7\', \'c\'], [\'100\', \'a\'] ]</span>\n\n<span class="token comment">// getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历</span>\n<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">getFoo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nmyObj<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">=</span> <span class="token string">\'bar\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ [\'foo\', \'bar\'] ]</span>\n\n<span class="token comment">// 如果传入的参数类型不是对象，则会被强制转换为对象类型</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ [\'0\', \'f\'], [\'1\', \'o\'], [\'2\', \'o\'] ]</span>\n\n<span class="token comment">// 如何优雅地迭代键值对~</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// "a 5", "b 7", "c 9"</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 梅开二度</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// "a 5", "b 7", "c 9"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>&lt;2&gt; <strong><code>Object.keys()</code> <strong>方法会返回一个由一个给定对象的自身可枚举</strong>属性</strong>组成的数组。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 如果参数为数组，那么会返回由索引组成的数组</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// console: [\'0\', \'1\', \'2\']</span>\n\n<span class="token comment">// 简单示例</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'c\'</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// console: [\'0\', \'1\', \'2\']</span>\n\n<span class="token comment">// 如果 key 可以被排序，那么遍历的顺序会由 key 决定</span>\n<span class="token keyword">const</span> anObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token string">\'c\'</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>anObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// console: [\'2\', \'7\', \'100\']</span>\n\n<span class="token comment">// getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历</span>\n<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">getFoo</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmyObj<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// console: [\'foo\']</span>\n</code></pre>\n<p>&lt;3&gt; <strong><code>Object.values()</code><strong>方法返回一个给定对象自身的所有可枚举</strong>属性值</strong>的数组。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 简单示例</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [\'bar\', 42]</span>\n\n<span class="token comment">// 如果 key 可以被排序，那么遍历的顺序会由 key 决定</span>\n<span class="token keyword">const</span> an_obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token string">\'c\'</span> <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span>an_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [\'b\', \'c\', \'a\']</span>\n\n<span class="token comment">// getFoo 并不是 myObj 的可枚举的属性，所以不会被遍历</span>\n<span class="token keyword">const</span> my_obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">getFoo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nmy_obj<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">=</span> <span class="token string">\'bar\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [\'bar\']</span>\n\n<span class="token comment">// 如果传入的参数类型不是对象，则会被强制转换为对象类型</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [\'f\', \'o\', \'o\']</span>\n</code></pre>\n<p>&lt;4&gt; <strong><code>Object.fromEntries()</code></strong> 方法把键值对列表转换为一个对象。执行的操作与 <strong><code>Object.fromEntries</code></strong> 相反</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// Map 转化为 Object</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// { foo: "bar", baz: 42 }</span>\n\n<span class="token comment">// Array 转化为 Object</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">\'0\'</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// { 0: "a", 1: "b", 2: "c" }</span>\n\n<span class="token comment">// 优雅地用数组方法处理对象~</span>\n<span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> object2 <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span> key<span class="token punctuation">,</span> val <span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">[</span> key<span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span> <span class="token comment">// { a: 2, b: 4, c: 6 }</span>\n</code></pre>\n'}}}]);