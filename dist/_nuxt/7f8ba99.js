(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{372:function(n,t){n.exports={attributes:{title:"关于 Vue3 中的 EffectScope",date:"2022/08/08 00:08:32",updated:"2022/08/08 00:08:32",categories:["技术"],tags:["Vue"]},html:'<p>时隔三个月后的第一篇博客，希望能终止我的颓势，让我能再向上爬一些。</p>\n<p>最近在写公司业务的时候使用了 <code>vueuse</code> 中的 <code>createSharedComposable</code> 这个方法，用起来十分的顺手。于是乎找到了这个方法源码来读一读，然后发现读不懂...整个方法的实现不过20行代码，看起来十分简洁。其中最核心的部分就是引用的 Vue3.2 的新特性：<code>EffectScope</code> 。去翻了翻 Vue 文档，发现这个特性居然 antfu 大佬亲自提出来的，属于是自产自销了。</p>\n<p>简单读了一下 <code>EffectScope</code> 的 RFC（主要是想深入读也没那个能力XD），终于是对这个方法有了一点头绪。</p>\n<p>首先看一下 <code>createSharedComposable</code> 方法的实现：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> EffectScope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vue-demi\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> effectScope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vue-demi\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> tryOnScopeDispose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../tryOnScopeDispose\'</span>\n\n<span class="token doc-comment comment">/**\n * Make a composable function usable with multiple Vue instances.\n *\n * <span class="token keyword">@see</span> https://vueuse.org/createSharedComposable\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> createSharedComposable<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>composable<span class="token operator">:</span> Fn<span class="token punctuation">)</span><span class="token operator">:</span> Fn <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> subscribers <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> state<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span>Fn<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  <span class="token keyword">let</span> scope<span class="token operator">:</span> EffectScope <span class="token operator">|</span> <span class="token keyword">undefined</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">dispose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    subscribers <span class="token operator">-=</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&amp;&amp;</span> subscribers <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      state <span class="token operator">=</span> <span class="token keyword">undefined</span>\n      scope <span class="token operator">=</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Fn<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    subscribers <span class="token operator">+=</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n      state <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">composable</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">tryOnScopeDispose</span><span class="token punctuation">(</span>dispose<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>方法中定义了三个变量：<code>subscribers</code> 代表使用这个 composable 的组件数量，<code>state</code> 是被传入的方法的返回值， <code>scope</code> 则是上面提到的 <code>EffectScope</code></p>\n<p>该方法接收一个函数作为参数，返回值也是一个函数。首先将 <code>subscribers ++</code> ，然后去判断当前是否已经存在了 <code>EffectScope</code>， 如果存在的话那就只绑定一个解绑事件并返回 <code>state</code> ，如果不存在的话，则创建一个 <code>EffectScope</code>，并执行 <code>scope.run</code> 来获取传入的函数的返回值。</p>\n<p>然后就是对 <code>EffectScope</code> 的相关概念讲解，此部分来自官方 RFC</p>\n<h4>出现的原因</h4>\n<p>在 Vue 的 setup 中，响应会在开始初始化的时候被收集，在实例被卸载的时候，响应就会自动的被取消追踪，这是一个很方便的特性。但是，当我们在组件外使用或者编写一个独立的包时，这会变得非常麻烦。当在单独的文件中，我们该如何停止 computed &amp; watch 的响应式依赖呢？</p>\n<p>在 Vue3.2 之前：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> disposables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> counter<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\ndisposables<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">stop</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">effect</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> stopWatch1 <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">counter: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>counter<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ndisposables<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>stopWatch1<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> stopWatch2 <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ndisposables<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>stopWatch2<span class="token punctuation">)</span>\n</code></pre>\n<p><code>EffectScope</code> 实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// effect, computed, watch, watchEffect created inside the scope will be collected</span>\n\n<span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nscope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> counter<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Count: \'</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// to dispose all effects in the scope</span>\nscope<span class="token punctuation">.</span><span class="token method function property-access">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<h4>如何使用</h4>\n<p>一个 scope 可以执行一个 run 函数（接受一个函数作为参数，并返回该函数的返回值），并且捕获所有在该函数执行过程中创建的 effect ，包括可以创建 effect 的API，例如 <code>computed</code> , <code>watch</code> , <code>watchEffect</code> :</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nscope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> counter<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Count: \'</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// the same scope can run multiple times</span>\nscope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">watch</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/*...*/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>当调用 <code>scope.stop()</code> 时，所有被捕获的 effect 都会被取消，包括 Nested Scopes 也会被递归取消。</p>\n<p>嵌套 scope 也会被他们的父级 scope 收集。并且当父级 scope 销毁的时候，所有的后代 scope 也会被递归销毁。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nscope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> counter<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// not need to get the stop handler, it will be collected by the outer scope</span>\n  <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Count: \'</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// dispose all effects, including those in the nested scopes</span>\nscope<span class="token punctuation">.</span><span class="token method function property-access">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p><code>EffectScope</code> 接受一个参数可以在分离模式（detached mode）下创建。 Detached Scope不会被父级收集。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nestedScope\n\n<span class="token keyword">const</span> parentScope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nparentScope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> counter<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// with the detected flag,</span>\n  <span class="token comment">// the scope will not be collected and disposed by the outer scope</span>\n  nestedScope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment">/* detached */</span><span class="token punctuation">)</span>\n  nestedScope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Count: \'</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// disposes all effects, but not `nestedScope`</span>\nparentScope<span class="token punctuation">.</span><span class="token method function property-access">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// stop the nested scope only when appropriate</span>\nnestedScope<span class="token punctuation">.</span><span class="token method function property-access">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>全局钩子函数 <code>onScopeDispose</code> 提供了类似于 <code>onUnmounted</code> 的功能，不同的是它工作在 <code>scope</code> 中而不是当前实例。</p>\n<p>这使得 composable functions 可以通过他们的 <code>scope</code> 清除他们的副作用。</p>\n<p>由于 <code>setup()</code> 默认会为当前实例创建一个 <code>scope</code>，所以当没有明确声明一个 <code>scope</code> 的时候，<code>onScopeDispose </code>等同于 <code>onUnmounted</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> onScopeDispose <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'vue\'</span>\n\n<span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nscope<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">onScopeDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'cleaned!\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nscope<span class="token punctuation">.</span><span class="token method function property-access">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// logs \'cleaned!\'</span>\n</code></pre>\n<p>通过 <code>getCurrentScope()</code> 可以获取当前 scope</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getCurrentScope <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'vue\'</span>\n\n<span class="token function">getCurrentScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// EffectScope | undefined</span>\n</code></pre>\n'}}}]);