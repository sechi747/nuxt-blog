(window.webpackJsonp=window.webpackJsonp||[]).push([[3,7,22,23,24,25,26,27,28,29,30,31],{352:function(n,t,o){"use strict";o.r(t);var e={methods:{backToIndex:function(){this.$router.push({path:"/"})}}},c=(o(354),o(11)),component=Object(c.a)(e,(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("div",{staticClass:"header-me"},[o("div",{staticClass:"my-name",on:{click:n.backToIndex}},[o("span",[n._v("Sechi")])]),n._v(" "),o("div",{staticClass:"article-meta"},[o("div",{staticClass:"article-category"},[o("nuxt-link",{attrs:{to:"/categories/技术"}},[n._v("技术")]),n._v(" "),o("nuxt-link",{attrs:{to:"/categories/随笔"}},[n._v("随笔")])],1)])])}),[],!1,null,"7a187469",null);t.default=component.exports},353:function(n,t,o){var content=o(355);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,o(19).default)("244a6b8e",content,!0,{sourceMap:!1})},354:function(n,t,o){"use strict";o(353)},355:function(n,t,o){var e=o(18)(!1);e.push([n.i,'.header-me[data-v-7a187469]{flex-direction:column}.header-me[data-v-7a187469],.header-me .my-name[data-v-7a187469]{display:flex;justify-content:center;align-items:center}.header-me .my-name[data-v-7a187469]{height:50px;width:80px;position:relative;cursor:pointer}.header-me .my-name[data-v-7a187469]:hover:after,.header-me .my-name[data-v-7a187469]:hover:before{content:"";position:absolute;top:-5px;bottom:-5px;left:-10px;right:-10px;border:5px solid #24acf2;-o-border-image:linear-gradient(45deg,gold,#ff1493) 1;border-image:linear-gradient(45deg,gold,#ff1493) 1;-webkit-clip-path:inset(0 round 10px);clip-path:inset(0 round 10px);-webkit-animation:clippath-data-v-7a187469 3.6s linear infinite;animation:clippath-data-v-7a187469 3.6s linear infinite}.header-me .my-name[data-v-7a187469]:hover:after{-webkit-animation:clippath-data-v-7a187469 3.6s linear -1.6s infinite;animation:clippath-data-v-7a187469 3.6s linear -1.6s infinite}.header-me .my-name span[data-v-7a187469]{color:var(--color-main);font-size:26px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.header-me .article-meta[data-v-7a187469]{padding:0;margin:12px 0;color:#6e7173;font-size:15px;text-indent:.15em;justify-content:center;opacity:.8}.header-me .article-meta[data-v-7a187469],.header-me .article-meta .article-category[data-v-7a187469]{display:flex;align-items:center;flex-wrap:wrap}.header-me .article-meta .article-category a[data-v-7a187469]{display:inline-block;margin-right:6px;padding:0 6px;color:#6e7173}.header-me .article-meta .article-category a[data-v-7a187469]:hover{color:#000}@-webkit-keyframes clippath-data-v-7a187469{0%{-webkit-clip-path:inset(0 0 90% 0);clip-path:inset(0 0 90% 0);filter:hue-rotate(0deg)}25%{-webkit-clip-path:inset(0 90% 0 0);clip-path:inset(0 90% 0 0)}50%{-webkit-clip-path:inset(90% 0 0 0);clip-path:inset(90% 0 0 0)}75%{-webkit-clip-path:inset(0 0 0 90%);clip-path:inset(0 0 0 90%)}to{-webkit-clip-path:inset(0 0 90% 0);clip-path:inset(0 0 90% 0);filter:hue-rotate(1turn)}}@keyframes clippath-data-v-7a187469{0%{-webkit-clip-path:inset(0 0 90% 0);clip-path:inset(0 0 90% 0);filter:hue-rotate(0deg)}25%{-webkit-clip-path:inset(0 90% 0 0);clip-path:inset(0 90% 0 0)}50%{-webkit-clip-path:inset(90% 0 0 0);clip-path:inset(90% 0 0 0)}75%{-webkit-clip-path:inset(0 0 0 90%);clip-path:inset(0 0 0 90%)}to{-webkit-clip-path:inset(0 0 90% 0);clip-path:inset(0 0 90% 0);filter:hue-rotate(1turn)}}',""]),n.exports=e},357:function(n,t,o){"use strict";o.d(t,"d",(function(){return e})),o.d(t,"e",(function(){return c})),o.d(t,"b",(function(){return l})),o.d(t,"c",(function(){return r})),o.d(t,"a",(function(){return k}));o(33);function e(n,t,o){var e=(n-1)*t,c=e+t;return o.slice(e,c)}function c(n,t){return n%t==0?n/t:(n-n%t)/t+1}function l(n){var t=new Date(n).getFullYear(),o=new Date(n).getMonth()+1,e=new Date(n).getDate();return o=o<10?"0".concat(o):o,e=e<10?"0".concat(e):e,"".concat(t,"年").concat(o,"月").concat(e,"日")}function r(n){var t=new Date(n).getMonth()+1,o=new Date(n).getDate();return t=t<10?"0".concat(t):t,o=o<10?"0".concat(o):o,"".concat(t,"月").concat(o,"日")}function k(n,t){for(var o=function(n,t){var o=n.length;if(!o||!t||t<1)return[];var e=0,c=0,l=new Array(Math.ceil(o/t));for(;e<o;)l[c++]=n.slice(e,e+=t);return l}(n,t),e=[],i=0;i<o.length;i++){var c=d(o[i],"date");e.push([]);for(var l=0;l<c.length;l++)e[i].push({date:new Date(c[l][0].date).getFullYear(),articles:[]});for(var r=0;r<e[i].length;r++)e[i][r].articles=d(o[i],"date")[r]}return e[0]}function d(n,t){var o=[],e=[],c=0;(n=n.sort((function(a,b){return a[t]>b[t]?-1:1}))).length&&(c=new Date(n[0][t]).getFullYear());for(var i=0;i<n.length;i++)new Date(n[i][t]).getFullYear()===c?e.push(n[i]):(c=new Date(n[i][t]).getFullYear(),o.push(e),e=[n[i]]);return o.push(e),o}},358:function(n,t,o){var map={"./20220323-hello-world.md":361,"./20220324-Ubuntu部署nuxt项目.md":362,"./20220328-通过Nginx把网站改为HTTPS协议.md":363,"./20220331-使用PicGo搭建图床.md":364,"./20220401-使用Webhook实现自动化部署.md":365,"./20220402-常见ES6语法简单用法.md":376,"./20220409-记一次闲鱼翻车经历.md":366,"./20220411-《你不知道的JavaScript》(1).md":367,"./20220412-Windows下Flutter环境搭建.md":368,"./20220414-执行上下文和执行栈.md":377,"./20220418-dart中的final和const.md":369,"./20220502-关于我摆烂的这些日子.md":370,"./20220807-关于Vue3中的EffectScope.md":378};function e(n){var t=c(n);return o(t)}function c(n){if(!o.o(map,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return map[n]}e.keys=function(){return Object.keys(map)},e.resolve=c,n.exports=e,e.id=358},361:function(n,t){n.exports={attributes:{title:"Hello world.",date:"2022/03/23 10:50:00",updated:"2022/03/23 10:50:00",categories:["随笔"],tags:["起始"]},html:"<p>2022/03/23</p>\n<p>博客正式上线。<br>\n希望我能坚持下去。</p>\n"}},362:function(n,t){n.exports={attributes:{title:"从零开始在 Ubuntu 上部署 Nuxt 项目",date:"2022/03/24 15:58:00",updated:"2022/03/28 10:05:00",categories:["技术"],tags:["Linux","Nuxt","网站部署"]},html:'<h2>前置工作</h2>\n<p>部署使用的 Ubuntu 版本：Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-96-generic x86_64)</p>\n<p>整个部署过程我都是使用 root 用户进行操作，所以不会有权限问题，但如果你是使用其他用户进行操作，则需要注意权限问题，适时给命令加上 <code>sudo</code> 前缀</p>\n<h4>安装 npm</h4>\n<p><code>apt install npm</code></p>\n<p><code>npm config set registry https://registry.npmmirror.com</code> 配置国内 npm 镜像</p>\n<h4>安装 n</h4>\n<p><code>npm i -g n</code></p>\n<h4>使用 n 安装 node</h4>\n<p><code>n lts</code>  安装 node 的长期支持版</p>\n<p><code>n 14.17.6</code> 安装特定版本的 node（此处仅做演示，请根据实际需求安装特定的 node 版本）</p>\n<p><code>n</code> 切换当前 node 版本，切换的同时 npm 版本也会改变。可以通过 <code>node -v</code> 查看当前 node 版本</p>\n<h4>安装 pm2</h4>\n<p><code>npm i -g pm2</code></p>\n<h4>安装并配置 git</h4>\n<ol>\n<li>\n<p><code>apt install git</code></p>\n</li>\n<li>\n<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">\'用户名\'</span>\n<span class="token function">git</span> config --global user.email <span class="token string">\'邮箱\'</span>\n</code></pre>\n</li>\n<li>\n<p><code>ssh-keygen -C \'邮箱\' -t rsa</code>  默认生成目录为 <code>~/.ssh</code></p>\n</li>\n<li>\n<p><code>cat ~/.ssh/id_rsa.pub</code> 复制 ssh key 并将其加入 github 的设置中</p>\n</li>\n</ol>\n<p>单独说一下我遇到的问题：在进行完以上步骤后，我尝试使用 <code>git clone git@github.com:sechi747/nuxt-blog.git </code> 命令拉取我的个人仓库，结果失败了。错误信息如下：</p>\n<pre class="language-bash"><code class="language-bash">kex_exchange_identification: read: Connection reset by peer\nfatal: Could not <span class="token builtin class-name">read</span> from remote repository\n\nPlease <span class="token function">make</span> sure you have the correct access rights\nand the repository exists\n</code></pre>\n<p>尝试了许多种方法进行解决，包括但不限于：重装系统，重新生成 ssh key，根据 github 官方的指南一步一步进行操作等都没有起作用。下面是我最终的解决方法。</p>\n<p>进入到 <code>.ssh</code> 文件夹下，新建 <code>config</code> 文件（如果有就不用建了，直接修改就可以），添加以下配置：</p>\n<pre class="language-shell"><code class="language-shell">Host github.com\nHostname ssh.github.com\nPort <span class="token number">443</span>\nUser <span class="token function">git</span>\n</code></pre>\n<p>然后再进行 <code>git</code> 操作就不会有问题了。造成这个现象的原因暂时不清楚，等有空再细查吧。</p>\n<h4>安装 Nginx</h4>\n<p>此处安装的 Nginx 版本为：nginx/1.18.0 (Ubuntu)</p>\n<ol>\n<li><code>apt install nginx</code> 安装 Nginx</li>\n<li><code>service nginx start</code> 启动 Nginx</li>\n</ol>\n<h4>安装 MySQL</h4>\n<p>其实我的博客项目并不涉及数据库，但是为了熟悉 Linux 操作还是装上吧~</p>\n<p>此处安装的 MySQL 版本为：8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))</p>\n<ol>\n<li><code>apt install mysql-server</code> 安装 MySQL</li>\n<li><code>systemctl status mysql.service</code> 看一下有没有安装成功</li>\n<li><code>mysql -u root -p</code> 因为安装时并没有要求设置密码，所以密码默认为空，直接敲回车就能进入控制台了</li>\n<li><code>use mysql;</code> 切换到 mysql 数据库</li>\n<li><code>alter user \'root\'@\'localhost\' identified with mysql_native_password by \'密码\';</code>  修改 root 账号的密码加密方式和密码，这样就可以在客户端使用密码连接数据库了</li>\n<li><code>grant all on *.* to \'root\'@\'localhost\';</code> 使外网可以访问到数据库</li>\n<li><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code> 将里面的<code>bind-address</code> 和 <code>mysqlx-bind-address</code> 修改为 <code>0.0.0.0</code></li>\n<li><code>systemctl restart mysql</code> 重启 MySQL 服务</li>\n</ol>\n<h4>安装 Docker</h4>\n<p>docker 肯定是会用到的，虽然我现在没用到~ 这里直接把官网的安装教程搬过来</p>\n<p>此处安装的 Docker 版本为：20.10.14, build a224086</p>\n<ol>\n<li>安装一些必要的包</li>\n</ol>\n<pre class="language-bash"><code class="language-bash"><span class="token function">apt</span> update\n<span class="token function">apt</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span> gnupg lsb-release\n</code></pre>\n<ol start="2">\n<li>\n<p>添加 docker 官方的 GPG 密钥<br>\n<code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></p>\n</li>\n<li>\n<p>设置稳定版的 docker 仓库</p>\n<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>\n  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null\n</code></pre>\n</li>\n<li>\n<p>安装 docker 引擎</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">apt</span> update\n<span class="token function">apt</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io\n</code></pre>\n</li>\n<li>\n<p>验证安装是否成功<br>\n<code>docker run hello-world</code><br>\n由于我们本地是没有 hello-world 这个镜像的，所以会去服务器 pull，如果发现成功运行了 hello-world 镜像，出现了 Hello from Docker 的，那么就算是安装成功啦！</p>\n</li>\n<li>\n<p>配置 docker 镜像加速源</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">vim</span> /etc/docker/daemon.json\n\n<span class="token comment">#在文件中添加以下内容</span>\n<span class="token punctuation">{</span>\n   <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n       <span class="token string">"https://mirror.ccs.tencentyun.com"</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">#添加完成后执行下面的命令重启 docker 服务器</span>\nsystemctl restart <span class="token function">docker</span>\n</code></pre>\n<p>由于 DockerHub 部署在国外，如果直接使用 <code>docker pull</code> 拉取镜像速度会比较慢，所以推荐配置一下 Docker镜像加速源，这里我选择的是腾讯云提供的加速源。</p>\n</li>\n</ol>\n<h2>项目部署</h2>\n<p>经过了上面的一系列准备，终于可以开始正式部署啦！</p>\n<p>nuxt 官网提供了两种部署方式，一种是使用 <code>npm run build &amp; npm run start</code> 进行 ssr 部署，另一种是使用 <code>npm run generate </code> 进行静态应用部署，这里我选择的是 ssr 部署。</p>\n<p>在部署之前，我们需要在项目中增加一些配置。</p>\n<ol>\n<li>\n<p>在 <code>nuxt.config.js</code> 中增加以下配置：</p>\n<pre class="language-js"><code class="language-js">  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">\'0.0.0.0\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">\'7070\'</span> <span class="token comment">// 项目运行的端口号。注意：请写一个不容易被占用的端口号</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n</li>\n<li>\n<p>在项目的根目录新建一个文件用于 pm2 配置： <code>ecosystem.config.js</code> 并在里面添加以下内容：</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'nuxt-blog\'</span><span class="token punctuation">,</span> <span class="token comment">// pm2 应用进程的名称</span>\n      <span class="token literal-property property">exec_mode</span><span class="token operator">:</span> <span class="token string">\'cluster\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用启动模式，这里选择集群</span>\n      <span class="token literal-property property">instances</span><span class="token operator">:</span> <span class="token string">\'max\'</span><span class="token punctuation">,</span> <span class="token comment">// 应用启动实例个数，这里选择最大，也可以填具体的数量</span>\n      <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">\'./node_modules/nuxt/bin/nuxt.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 启动脚本路径</span>\n      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token string">\'start\'</span> <span class="token comment">// 传递给脚本的参数</span>\n      <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".nuxt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 监听 .nuxt 文件夹，当里面内容更新时会自动重启应用</span>\n  \t  <span class="token literal-property property">watch_delay</span><span class="token operator">:</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token comment">// 监听延迟</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n</ol>\n<p>接下来你需要把自己的项目上传到 github 上，这一步就不再赘述。</p>\n<p>项目上传成功后，我们切回到服务器的终端并进行以下操作：</p>\n<ol>\n<li>\n<p>首先我们要通过 <code>git clone</code> 命令把项目放到服务器端</p>\n<pre class="language-shell"><code class="language-shell"><span class="token comment">#这里我选择在用户目录下新建一个 www 文件夹，并把项目放到里面，文件位置可以自行更改</span>\n<span class="token builtin class-name">cd</span> ~\n<span class="token function">mkdir</span> www\n<span class="token builtin class-name">cd</span> www\n<span class="token function">git</span> clone git@github.com:sechi747/nuxt-blog.git\n</code></pre>\n</li>\n<li>\n<p>项目拉下来之后，需要使用 npm 安装依赖并打包</p>\n<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> nuxt-blog\n<span class="token function">npm</span> i\n<span class="token function">npm</span> run build\n</code></pre>\n</li>\n<li>\n<p>打包完成后，我们就可以使用 pm2 启动项目了</p>\n<pre class="language-shell"><code class="language-shell">pm2 start\n</code></pre>\n</li>\n</ol>\n<p>我们可以通过 <code>pm2 ls</code> 查看当前正在运行的应用状态， <code>pm2 logs</code> 查看日志</p>\n<p>最后，我们只需要配置一下 Nginx 就可以完成部署啦！</p>\n<ol>\n<li><code>vim /etc/nginx/nginx.conf</code> 编辑 Nginx 配置</li>\n<li><code>nginx -s reload </code> 在 Nginx 目录下运行此命令，重新启动 Nginx 服务</li>\n</ol>\n<p>贴出我自己的配置供参考：</p>\n<pre class="language-shell"><code class="language-shell">user www-data<span class="token punctuation">;</span>\nworker_processes auto<span class="token punctuation">;</span>\npid /run/nginx.pid<span class="token punctuation">;</span>\ninclude /etc/nginx/modules-enabled/*.conf<span class="token punctuation">;</span>\n\nevents <span class="token punctuation">{</span>\n        worker_connections <span class="token number">768</span><span class="token punctuation">;</span>\n        <span class="token comment"># multi_accept on;</span>\n<span class="token punctuation">}</span>\n\nhttp <span class="token punctuation">{</span>\n\n        <span class="token comment">##</span>\n        <span class="token comment"># Basic Settings</span>\n        <span class="token comment">##</span>\n\n        sendfile on<span class="token punctuation">;</span>\n        tcp_nopush on<span class="token punctuation">;</span>\n        tcp_nodelay on<span class="token punctuation">;</span>\n        keepalive_timeout <span class="token number">65</span><span class="token punctuation">;</span>\n        types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span>\n        <span class="token comment"># server_tokens off;</span>\n\n        <span class="token comment"># server_names_hash_bucket_size 64;</span>\n        <span class="token comment"># server_name_in_redirect off;</span>\n\n        include /etc/nginx/mime.types<span class="token punctuation">;</span>\n        default_type application/octet-stream<span class="token punctuation">;</span>\n\n        <span class="token comment">##</span>\n        <span class="token comment"># SSL Settings</span>\n        <span class="token comment">##</span>\n\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span> <span class="token comment"># Dropping SSLv3, ref: POODLE</span>\n        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>\n\n        <span class="token comment">##</span>\n        <span class="token comment"># Logging Settings</span>\n        <span class="token comment">##</span>\n\n        access_log /var/log/nginx/access.log<span class="token punctuation">;</span>\n        error_log /var/log/nginx/error.log<span class="token punctuation">;</span>\n\n        <span class="token comment">##</span>\n        <span class="token comment"># Gzip Settings</span>\n        <span class="token comment">##</span>\n\n        <span class="token function">gzip</span> on<span class="token punctuation">;</span>\n\n        <span class="token comment"># gzip_vary on;</span>\n        <span class="token comment"># gzip_proxied any;</span>\n        <span class="token comment"># gzip_comp_level 6;</span>\n        <span class="token comment"># gzip_buffers 16 8k;</span>\n        <span class="token comment"># gzip_http_version 1.1;</span>\n        <span class="token comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span>\n\n        <span class="token comment">##</span>\n        <span class="token comment"># Virtual Host Configs</span>\n        <span class="token comment">##</span>\n\t\t\n\t\t<span class="token comment">#注意！下面这两行要注释掉，否则80端口会一直被Nginx占用，导致下面自定义的sever配置不生效。</span>\n        <span class="token comment">#include /etc/nginx/conf.d/*.conf;</span>\n        <span class="token comment">#include /etc/nginx/sites-enabled/*;</span>\n\n        map <span class="token variable">$sent_http_content_type</span> <span class="token variable">$expires</span> <span class="token punctuation">{</span>\n                <span class="token string">"text/html"</span>                 epoch<span class="token punctuation">;</span>\n                <span class="token string">"text/html; charset=utf-8"</span>  epoch<span class="token punctuation">;</span>\n                default                     off<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        upstream webserver <span class="token punctuation">{</span>\n                server <span class="token number">127.0</span>.0.1:7070<span class="token punctuation">;</span> <span class="token comment">#项目的启动地址及端口号</span>\n        <span class="token punctuation">}</span>\n\n        server <span class="token punctuation">{</span>\n                listen          <span class="token number">80</span><span class="token punctuation">;</span>             <span class="token comment"># 监听的端口</span>\n                server_name     http://plantsechi.top<span class="token punctuation">;</span>    <span class="token comment"># 域名</span>\n\n                <span class="token function">gzip</span>            on<span class="token punctuation">;</span>\n                gzip_types      text/plain application/xml text/css application/javascript<span class="token punctuation">;</span>\n                gzip_min_length <span class="token number">1000</span><span class="token punctuation">;</span>\n\n                location / <span class="token punctuation">{</span>\n                        expires <span class="token variable">$expires</span><span class="token punctuation">;</span>\n\n                        proxy_redirect                      off<span class="token punctuation">;</span>\n                        proxy_set_header Host               <span class="token variable">$host</span><span class="token punctuation">;</span>\n                        proxy_set_header X-Real-IP          <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>\n                        proxy_set_header X-Forwarded-For    <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>\n                        proxy_set_header X-Forwarded-Proto  <span class="token variable">$scheme</span><span class="token punctuation">;</span>\n                        proxy_read_timeout          1m<span class="token punctuation">;</span>\n                        proxy_connect_timeout       1m<span class="token punctuation">;</span>\n                        proxy_pass         http://webserver<span class="token punctuation">;</span> <span class="token comment"># 这里要填入上面的upstream</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>完成以上所有步骤后，打开浏览器，输入域名，你就可以看到自己的网站啦~</p>\n<p>虽然已经可以成功访问到网站了，但还是存在以下两个问题：</p>\n<ul>\n<li>网站使用的是 http 协议而不是 https 协议</li>\n<li>更新代码后每次都要手动在服务器端拉取代码并打包</li>\n</ul>\n<p>后续有时间的话会把这两个坑给填上。</p>\n'}},363:function(n,t){n.exports={attributes:{title:"通过 Nginx 把网站改为 HTTPS 协议",date:"2022/03/28 10:58:00",updated:"2022/03/28 10:58:00",categories:["技术"],tags:["网站部署"]},html:'<p>填一下上次部署网站遗留的坑：如何使用 Nginx 安装 SSL 证书，从而使网站的协议由 http 变为 https</p>\n<h3>前期准备</h3>\n<ol>\n<li>首先，我们需要给我们的域名申请 SSL 证书，既有免费证书，也有付费证书，一般来讲免费证书就已经够用了，所以在这里只介绍免费证书的申请方法。<br>\n这里建议去<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云</a>或<a href="https://console.cloud.tencent.com/certoverview">腾讯云</a>申请证书（我选择的是腾讯云，所以下述步骤以腾讯云为准），申请步骤非常简单，只需要填上一些必要的信息（域名、邮箱等）就可以申请，大概 1-10 分钟就可以拿到证书啦。</li>\n<li>申请完成后我们可以在证书管理界面下载证书，下载的格式选择 Nginx，解压后可以得到四个文件:\n<ul>\n<li><code>plantsechi.top_bundle.crt</code> 证书文件</li>\n<li><code>plantsechi.top_bundle.pem</code> 证书文件（安装时可忽略该文件）</li>\n<li><code>plantsechi.top.key</code> 私钥文件</li>\n<li><code>plantsechi.top.csr</code> CSR 文件（安装时可忽略该文件）<br>\n其实安装证书的过程中真正用到的只有 <code>crt</code> 文件和 <code>key</code> 文件</li>\n</ul>\n</li>\n<li>有了证书之后我们需要把它们上传到服务器上，这里我使用的是 XFTP 进行文件上传。首先我们需要在 Nginx 的根目录新建一个文件夹存放证书，然后把两个文件放到该文件夹内。最终达到的效果：<code>/etc/nginx/cert</code> 中存放了 <code>plantsechi.top_bundle.crt</code> 和 <code>plantsechi.top.key</code> 两个文件。</li>\n</ol>\n<h3>Nginx 配置</h3>\n<p>进行完以上操作后，我们需要修改一下 Nginx 的配置，下面放出我的部分配置供参考：</p>\n<pre class="language-shell"><code class="language-shell">upstream webserver <span class="token punctuation">{</span>\n\t\tserver <span class="token number">127.0</span>.0.1:7070<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\tserver <span class="token punctuation">{</span>\n   \t\t\tlisten <span class="token number">443</span> ssl<span class="token punctuation">;</span>\n    \t\tserver_name plantsechi.top<span class="token punctuation">;</span> <span class="token comment">#域名</span>\n    \t\tssl_certificate  /etc/nginx/cert/plantsechi.top_bundle.crt<span class="token punctuation">;</span> <span class="token comment">#证书文件的路径</span>\n    \t\tssl_certificate_key /etc/nginx/cert/plantsechi.top.key<span class="token punctuation">;</span> <span class="token comment">#私钥文件的路径</span>\n    \t\tssl_session_timeout 5m<span class="token punctuation">;</span>\n   \t\t\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>\n    \t\tssl_protocols TLSv1.2 TLSv1.3<span class="token punctuation">;</span>\n    \t\tssl_prefer_server_ciphers on<span class="token punctuation">;</span>\n\n    \t\t<span class="token function">gzip</span>            on<span class="token punctuation">;</span>\n    \t\tgzip_types      text/plain application/xml text/css application/javascript<span class="token punctuation">;</span>\n    \t\tgzip_min_length <span class="token number">1000</span><span class="token punctuation">;</span>\n\n    \t\tlocation / <span class="token punctuation">{</span>\n        \t\t\texpires <span class="token variable">$expires</span><span class="token punctuation">;</span>\n        \t\t\tproxy_redirect                      off<span class="token punctuation">;</span>\n        \t\t\tproxy_set_header Host               <span class="token variable">$host</span><span class="token punctuation">;</span>\n        \t\t\tproxy_set_header X-Real-IP          <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>\n        \t\t\tproxy_set_header X-Forwarded-For    <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>\n        \t\t\tproxy_set_header X-Forwarded-Proto  <span class="token variable">$scheme</span><span class="token punctuation">;</span>\n        \t\t\tproxy_read_timeout          1m<span class="token punctuation">;</span>\n        \t\t\tproxy_connect_timeout       1m<span class="token punctuation">;</span>\n        \t\t\tproxy_pass         http://webserver<span class="token punctuation">;</span> \n    \t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n</code></pre>\n<p>完成以上配置就可以通过 https 协议访问网站啦~但是还是有一些地方不太完美，如果在浏览器依旧输入 http 协议的 URL，依旧会使用 http 协议，所以我们需要让网站的 http 请求自动重定向到 https，该功能同样可以通过 Nginx 实现，只需要再额外监听 80 端口就可以实现：</p>\n<pre class="language-shell"><code class="language-shell">\tserver <span class="token punctuation">{</span>\n    \t\tlisten <span class="token number">80</span><span class="token punctuation">;</span>\n    \t\tserver_name plantsechi.top<span class="token punctuation">;</span> \n    \t\t<span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span> <span class="token comment">#将默认 80 端口的请求重定向为 https</span>\n\t<span class="token punctuation">}</span>\n</code></pre>\n<p>至此，我们已经成功将网站的协议改为 https，还是挺简单的~</p>\n'}},364:function(n,t){n.exports={attributes:{title:"使用 PicGO + 腾讯云COS 搭建自己的图床",date:"2022/03/31 21:28:56",updated:"2022/03/31 21:28:56",categories:["技术"],tags:["图床"]},html:'<p>迫于发现博客不能没有图片，就像西方不能没有耶路撒冷，决定自己搭建一个图床，本来以为会是比较困难的一件事，但是查阅资料之后发现居然意外地简单，感谢大佬们造的轮子。下面以 PicGo 为例搭建一个属于自己的图床。</p>\n<h3>下载并安装 PicGo</h3>\n<p>在这里放上 <a href="https://github.com/Molunerfinn/PicGo">PicGo 的 GitHub 地址</a>，请自行根据系统下载。</p>\n<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo 的官方文档</a> 也放上，方便各位自行查阅。</p>\n<h3>创建存储桶</h3>\n<p>PicGo 支持多个图床，如<code>七牛图床</code>、<code>腾讯云COS</code>、<code>阿里云OSS</code>等，在这里我选择使用<code>腾讯云COS</code> 进行演示。</p>\n<p>首先进入腾讯云的<a href="https://console.cloud.tencent.com/cos/bucket">对象存储控制台</a>，在<code>资源包管理</code>选项卡里可以看到自己的资源包，如果没有话可以根据自己的需求购买，价格相对来说还是比较亲民的，另外新用户会赠送有效期六个月的 50g 容量包。</p>\n<p>购买完成后，进入<code>存储桶列表</code>标签页，在这里我们可以创建存储桶，点击创建存储桶，会出现以下界面：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220331171659674.png" alt="image-20220331171659674"></p>\n<p>存储桶的所属区域可以根据自身选择，最好选择与服务器在同一区域（如果你的服务器也是腾讯云的话）</p>\n<p>名称的话最好有规律可循，我个人习惯就是<code>用途-时间</code></p>\n<p>访问权限的话需要选择公有读私有写，毕竟这是个图床</p>\n<p>上面几项填完后点击下一步，出现以下界面：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220331172203030.png" alt="image-20220331172203030"></p>\n<p>版本控制我没有选择打开，因为需要额外收费 XD</p>\n<p>日志存储也没有打开，因为感觉挺没必要，毕竟只是当个图床</p>\n<p>存储桶标签的话就是一个键值对，主要作为管理存储桶的一个标识，这个就随意填上吧</p>\n<p>服务端加密我也没有打开，因为这是一个图床（万能的理由）</p>\n<p>再次点击下一步之后会展示确认页，如果没有问题的话点击创建吧</p>\n<h3>配置图床</h3>\n<p>打开 PicGo，进入腾讯云COS 的设置界面，可以看到以下界面：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220331172914261.png" alt="image-20220331172914261"></p>\n<p>COS 版本选择 V5</p>\n<p><code>SecretId</code>  <code>SecretKey</code>  <code>APPID</code> 可以到<a href="https://console.cloud.tencent.com/cam/capi">这里</a>来获取</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220331173213939.png" alt="image-20220331173213939"></p>\n<p>存储空间名就是我们先前创建的存储桶的名字</p>\n<p>存储区域则是创建存储桶时选择的区域的编号，比如北京区域的就是 <code>ap-beijing</code>， 具体可以在<a href="https://console.cloud.tencent.com/cos/bucket">这里</a>看到</p>\n<p>存储路径非必填，如果不填的话会把图片默认存储在根目录</p>\n<p>自定义域名我没有填，如果设置的话，PicGo 会以<code>自定义域名+储存路径+上传的图片名</code>的方式返回图片地址</p>\n<p>全部配置完成后点击确定，之后可以选择将腾讯云COS设为默认图床。</p>\n<h3>与 Typora 关联</h3>\n<p>完成以上所有步骤后，我们已经搭建好了图床并可以正常使用啦~</p>\n<p>对我个人而言，图床的作用更多的是在编写 markdown 文件时插入图片使用的，而作为一款非常流行的 markdown 编辑器，Typora 提供了对 PicGO 的支持，经过简单的配置后我们可以更加方便的在 markdown 中插入图片。</p>\n<p>首先，打开 Typora，在左上角点击<code>文件-偏好设置</code>，进入<code>图像</code>设置，并设置以下内容：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220331210940280.png" alt="image-20220331210940280"></p>\n<p>设置完成后，每次在 markdown 中插入图片时都会自动上传到自己的图床，无需手动上传。配合 <code>Snipaste</code> 简直是太香了~</p>\n<p>至此，我们就完成了一个简单的图床的搭建，粗略地翻阅了一下文档，发现 PicGo 还有许多其他有用的功能和插件，等有时间再去探索吧~</p>\n'}},365:function(n,t){n.exports={attributes:{title:"使用 Webhook 实现前端项目的自动化部署",date:"2022/04/01 16:58:53",updated:"2022/04/01 16:58:53",categories:["技术"],tags:["网站部署"]},html:'<p>填一下上次部署网站遗留的坑：如何进行前端项目的自动化部署？</p>\n<p>自动化部署的解决方案有很多，比如 <code>Jenkins</code>、<code>Drone</code>、<code>GitLab CI/CD</code>、<code>cron 定时任务</code>、<code>Webhook</code>等。最开始我尝试使用 Jenkins 进行自动化部署，但是配置到一半我发现 Jenkins 对于我来说太“重”了，绝大部分的功能对我来说都意义不大，毕竟我现在只是想自动化部署一个极其简单的博客，用上 Jenkins 有些买椟还珠了。后来我发现使用 cron 设置定时任务好像还挺简单的，但是有一个显而易见的缺点：无法判断是否需要重新部署，因此会进行很多无意义的操作。最后思来想去还是决定使用 Webhook 来进行自动化部署，它有很多的优点：配置简单，十分轻量，功能不局限于自动化部署。所以还是非常值得学习一下的。</p>\n<h3>什么是 Webhook？</h3>\n<p>Webhook 的概念早在 2007 年就被提出了（但我才刚知道有这么个概念），首先要说明一点，Webhook 并不是一种<strong>工具</strong>，而是一个<strong>概念</strong>或者说<strong>方法</strong>。</p>\n<p>简单理解的话，Webhook 就是一种反向 API 机制，类似于 trigger。API 的使用场景如下：</p>\n<ol>\n<li>服务器端提供一个 API</li>\n<li>客户端请求这 API</li>\n<li>服务器端接收到请求，并向客户端返回数据</li>\n<li>客户端拿到数据进行对应的处理</li>\n</ol>\n<p>而 Webhook 的使用场景则相反：</p>\n<ol>\n<li>客户端给服务端提供一个 Webhook URL</li>\n<li>当某些事件被触发时，服务器端会主动向客户端提供的 URL 推送数据</li>\n<li>客户端拿到数据进行对应的处理</li>\n</ol>\n<p>其实就是客户端由原本的主动请求者变为了被动接收者。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220401144700498.png" alt="image-20220401144700498"></p>\n<h3>Webhook 的应用场景</h3>\n<p>Webhook 的应用场景非常广泛，比如安全性要求非常高的支付功能，第三方平台的鉴权、登录，资源同步等。</p>\n<p>想象一下这个场景：客户端现在向服务器端上传了一个比较大的文件，而这个文件需要在服务器端进行处理之后才返回给客户端，恰巧这时候服务器端有很多的文件待处理，需要排队等待。如果按照传统做法，客户端需要不断地轮询服务器来获取文件的处理状态，但如果使用 Webhook 就不需要再进行轮询了，只需要让服务器端在完成处理后向客户端提供的 Webhook URL 发送一个请求并返回处理后的文件就可以了。be like:</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220401152951862.png" alt="image-20220401152951862"></p>\n<h3>使用 Webhook 实现自动化部署</h3>\n<p>简单介绍完 Webhook 之后，我们开始回归正题：自动化部署。</p>\n<p>GitHub 本身就提供了 Webhook 的设置，所以我们可以很方便的监听远程仓库的各种事件，比如 <code>push</code>, <code>folk</code>, <code>pull-request</code> 等。所以我们可以大体想到这么一个方案：在服务器上搭建一个 Node 服务用来监听 GitHub 发送过来的信息，每当远程仓库有 commit 时就让 GitHub 向我们的服务器发送一个请求，服务器接收到请求后会自动运行提前准备好的 bash 脚本，完成项目的自动化部署。有了思路之后我们开始一步步进行。</p>\n<h4>搭建 Node 服务</h4>\n<p>秉承“尽量不要重复造轮子”的原则，我们可以使用<a href="https://github.com/rvagg/github-webhook-handler">一个已经封装好的库</a>进行 Webhook 的处理，这个库的代码并不多，逻辑也比较容易懂，建议读一读。</p>\n<p>首先在服务器上创建 Node 服务的根目录，然后在根目录下运行 <code>npm init -y</code> 进行初始化，运行 <code>npm i github-webhook-handler</code> 安装依赖，安装完成后，我们可以在根目录创建一个 <code>index.js</code> 文件，并写入以下内容：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'github-webhook-handler\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/webhook\'</span><span class="token punctuation">,</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">\'yourSecret\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// secret 相当于一个密码，可以自行设置</span>\n\nhttp<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token property-access">statusCode</span> <span class="token operator">=</span> <span class="token number">404</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token string">\'no such location\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'server listening on port 7777\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nhandler<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">\'Error:\'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 监听 push 事件 </span>\nhandler<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'push\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received a push event from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span><span class="token property-access">payload</span><span class="token punctuation">.</span><span class="token property-access">repository</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span><span class="token property-access">payload</span><span class="token punctuation">.</span><span class="token property-access">ref</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>接着我们可以使用 pm2 启动服务器 <code>pm2 start index.js</code></p>\n<p>启动完成后我们就需要到 GitHub 上设置 Webhook 了</p>\n<h4>Webhook 设置</h4>\n<p>首先进入到代码所在的 GitHub 仓库，点击 <code>Setting</code>，找到 <code>Webhooks</code> 选项卡，点击 <code>Add webhook</code> 来新建一个 Webhook</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220401160047209.png" alt="image-20220401160047209"></p>\n<p>新建界面如下：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220401160329887.png" alt="image-20220401160329887"></p>\n<p><code>Payload URL</code> 就是我们的服务器的请求路径，也就是服务器 IP 地址，加上我们上面设置的端口号最后加上我们设置的 <code>path</code>。</p>\n<p><code>Content type</code> 一定要选择 <code>application/json</code>，这一点在 <code>github-webhook-handler</code> 的文档中也有提到。</p>\n<p><code>Secret</code> 就是我们之前设置的 <code>secret</code>，保持一致就可以了。</p>\n<p>因为我们只需要自动化部署的功能，所以只需要监听 <code>push</code> 事件就可以了。日志也勾上，里面会有很多 Webhook 的配置，可以拿来参考做一些自定义的东西。</p>\n<p>创建完成后，GitHub 会自动测试 Webhook 的可用性，如果显示的是绿色对号，那说明我们的配置没有问题，但如果是红色叉号，那就说明我们的配置存在问题，这里有一个小坑，如果你直接去修改这个 Webhook 的配置，即使修改正确这里的状态也不会改变，因为 GitHub 只会在创建 Webhook 的时候进行连接测试，所以如果你想知道自己修改后的配置是否正确，建议删除原来的 Webhook 然后重新创建，这时候就能知道修改后的配置是否正确了。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220401162119764.png" alt="image-20220401162119764"></p>\n<h4>编写部署脚本</h4>\n<p>现在我们已经可以监听远程仓库的 <code>push</code> 事件了，所以我们只需要在接收事件后运行一下脚本就可以实现自动化部署啦~将 <code>index.js</code> 的内容稍作修改：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'child_process\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">spawn</span>\n<span class="token keyword">const</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'github-webhook-handler\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/webhook\'</span><span class="token punctuation">,</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">\'yourSecret\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// secret 相当于一个密码，可以自行设置</span>\n\nhttp<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token property-access">statusCode</span> <span class="token operator">=</span> <span class="token number">404</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token string">\'no such location\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'server listening on port 7777\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nhandler<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span><span class="token string">\'Error:\'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 监听 push 事件 </span>\nhandler<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'push\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received a push event from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span><span class="token property-access">payload</span><span class="token punctuation">.</span><span class="token property-access">repository</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span><span class="token property-access">payload</span><span class="token punctuation">.</span><span class="token property-access">ref</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token function">runCmd</span><span class="token punctuation">(</span><span class="token string">\'sh\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'./deploy.sh\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 运行命令</span>\n<span class="token keyword">function</span> <span class="token function">runCmd</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> resMsg <span class="token operator">=</span> <span class="token string">"Deploy End"</span>\n\n  child<span class="token punctuation">.</span><span class="token property-access">stdout</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> resMsg <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  child<span class="token punctuation">.</span><span class="token property-access">stdout</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token function">callback</span> <span class="token punctuation">(</span>resMsg<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>然后在 <code>index.js</code> 的同级目录下新建 <code>deploy.sh</code> 文件：</p>\n<pre class="language-sh"><code class="language-sh">echo &quot;Start deployment&quot;\ncd ~/www/nuxt-blog\necho &quot;stop process&quot;\npm2 stop nuxt-blog\necho &quot;pulling source code...&quot;\ngit pull\necho &quot;check dependencies&quot;\nnpm install\necho &quot;build /.nuxt&quot;\nnpm run build\necho &quot;start process&quot;\npm2 start\necho &quot;Finished.&quot;\n</code></pre>\n<p>脚本的内容仅供参考，请自行修改</p>\n<p>完成以上步骤之后，我们可以自行测试一下（测试前不要忘记重启服务），本地向远程仓库提交一些修改，比如样式的修改等，然后过一小会去访问网站看一下修改是否生效。</p>\n<p>至此，我们已经完成了自动化部署的需求，其实 Webhook 的用途还有很多，比如有人向仓库提了 <code>issue</code> 可以自动给我们发送提醒邮件，或者也可以通过一些第三方的平台进行个性化提醒，例如钉钉的智能机器人。建议有时间的话可以多多探索~</p>\n'}},366:function(n,t){n.exports={attributes:{title:"记一次闲鱼翻车经历",date:"2022/04/09 23:48:53",updated:"2022/04/09 23:48:53",categories:["随笔"],tags:["生活"]},html:"<p>前几天在闲鱼上入手了一个全新未拆封的 Quest2，因为是未拆封，而且我自认为早已“身经百战”，所以并没有什么翻车的顾虑。但正所谓“骄兵必败”，这次我居然翻车了....必须得承认，这是我第一次在电子产品上面翻车。</p>\n<p>第一天晚上刚拿到货，迫不及待地进行开箱，还发了条朋友圈。由于提前对 Quest 的激活流程有一定的了解，所以我直接上手，开机，固件更新，进入 logo 界面，一气呵成。然后就一直卡在了 logo 页面....一开始我只是以为第一次开机初始化，时间长一点很正常，但是等了十分钟，还是在 logo 页面，这不对劲吧....我连忙开始去 Google 搜索答案，同时也开始联系一位 Quest 老玩家。到最后我得出了一个结论，这机器确实有点问题....网上的解决方案无外乎三种：</p>\n<ol>\n<li>恢复出厂设置</li>\n<li>扔给售后换新的机器</li>\n<li>把机器扔到角落摆烂，等它自己耗没电再充电开机</li>\n</ol>\n<p>第一种方法试了很多遍，并不起作用。第二种方法非常难实现。所以我的选择就只剩下了看上去最扯淡的第三种方法，然而更扯淡的是这方法居然真的起作用了....但这仅仅是暂时的，在我享受了一天的 VR 乐趣之后，它又坏了，而且和上次的情形一样，唯一的不同是 logo 变了，因为三月份的一次更新，原本的 Oculus 的 logo 被替换为了 Meta 的 logo（f**k meta）</p>\n<p>其实从第一天开始我就有和卖家沟通过，但是呢，这个卖家的态度就是十分摆烂，无论我说什么，他总是会强调：“机器是全新的，肯定不是我的问题。”本来我只是想让他帮忙搞下售后，多花个几百块钱我也就认了，但他全程阴阳怪气还一直甩锅，气得我直接就申请退货退款，他自然是不会同意，所以最后还是申请了客服介入。我直接把所有相关的证据都放了上去，为了以防万一，我还特地打了闲鱼的客服电话说明情况，请求闲鱼小二提前介入。可能是因为涉及金额不低，所以仅仅过了一个多小时就有了结果：闲鱼小二判定我胜诉。看到结果后我立马叫了快递，赶紧把这个烫手芋头送了出去，保险起见，我还把寄快递的全过程录了下来，现在快递已经送出去了，不知道最后是个什么结果，直到现在我都在担心卖家收到货后会不会继续扯皮，比如诬陷我故意弄坏机器之类的话。</p>\n<p>虽然这个机器退回去了，但我还是很想再买一个 Quest2，毕竟磁吸眼镜已经配了，精英头戴也已经买了，总不能放在角落吃灰吧？思来想去，觉得不能再从闲鱼买了，于是选择了淘宝上的一家店，不仅比原来便宜几十块，而且店家还承诺三十天内质量问题包售后（希望这不是空话）。说实在的，有了第一次的翻车经历，我开始害怕会不会连续翻车两次，如果这次买的机器再翻车了，我也算是“天选之子”了....</p>\n<p>祈祷我的退款顺利，祈祷我的新机器顺利。</p>\n"}},367:function(n,t){n.exports={attributes:{title:"读书笔记：《你不知道的 JavaScript》(1)",date:"2022/04/11 11:30:53",updated:"2022/04/11 11:30:53",categories:["技术"],tags:["读书笔记","Vanilla JS"]},html:'<p>本篇文章总结自《你不知道的 JavaScript (上卷)》的第一章，是基于书籍内容和我个人的理解总结的，所以可能会有一些纰漏，请酌情阅读（虽然可能只有我自己才会读）。</p>\n<h1>作用域是什么</h1>\n<h2>编译原理</h2>\n<p>JS 代码编译有三个步骤：</p>\n<ul>\n<li>\n<p>分词/词法分析（Tokenizing/Lexing）<br>\n这个过程会将代码分解为多个词法单元（token）。比如 <code>var a = 1;</code> 就会被分解为：<code>var</code>、<code>a</code>、<code>=</code>、<code>1</code>、<code>;</code>。</p>\n</li>\n<li>\n<p>解析/词法分析（Parsing）<br>\n这个过程会将词法单元流（数组）转换为抽象语法树（Abstract Syntax Tree, AST）。比如 <code>var a = 1;</code> 会变成下面这样子：</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>\n      <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n      <span class="token string-property property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>\n          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>\n          <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string-property property">"init"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token string-property property">"raw"</span><span class="token operator">:</span> <span class="token string">"1"</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token string-property property">"kind"</span><span class="token operator">:</span> <span class="token string">"var"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n<li>\n<p>代码生成<br>\n这个过程会将 AST 转换为可执行代码。抛开具体细节，其实就是将 <code>var a = 1;</code> 的 AST 转化为一组机器指令（字节码 =&gt; 机器码），用来创建一个叫作 <code>a</code> 的变量（包括分配内容等），并将一个值存储在 <code>a</code> 中。</p>\n</li>\n</ul>\n<p>JS 代码的编译大部分时候都是发生在代码执行前。</p>\n<h2>作用域</h2>\n<p>首先介绍三个概念：</p>\n<ul>\n<li>引擎<br>\n负责整个 JavaScript 程序的编译及执行过程</li>\n<li>编译器<br>\n负责词法分析、语法分析及代码生成等工作</li>\n<li>作用域<br>\n负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并且管理当前执行代码对这些标识符的访问权限</li>\n</ul>\n<p>以 <code>var a = 1</code> 为例，编译器与作用域的交互如下：</p>\n<ol>\n<li>遇到 <code>var a</code> 时，编译器会询问作用域<strong>是否已经有一个该名称的变量存在于同一个作用域的集合中</strong>。如果是，那么编译器会忽略该变量的声明，然后继续编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 <code>a</code></li>\n<li>接下来编译器会为引擎生成运行时所需的代码，这些代码用来处理 <code>a = 2</code> 的赋值操作。引擎运行时会先询问作用域，当前的作用域集合中是否存在一个名为 <code>a</code> 的变量。如果存在，引擎会使用这个变量。如果不存在，引擎会继续查找变量</li>\n<li>如果引擎最终找到了 <code>a</code> 变量，则会将 <code>2</code> 赋值给它；如果没找到，则会抛出一个异常</li>\n</ol>\n<h3>引擎的两种查询方式</h3>\n<p>引擎在寻找变量时有两种查询方式：<code>LHS</code>(Left Hand Side) 和 <code>RHS</code>(Right Hand Side)</p>\n<p>可以<strong>笼统地</strong>认为当变量出现在赋值操作的左侧时会进行 <code>LHS</code> 查询，出现在右侧时进行 <code>RHS</code> 查询。</p>\n<p>例如 <code>console.log(a)</code> 对 <code>a</code> 的引用就是一个 <code>RHS</code> 引用，因为 <code>a</code> 并没有被赋予任何值。相应的，需要去查找并取得 <code>a</code> 的值，这样才能将值传递给 <code>console.log(...)</code></p>\n<p>例如 <code>a = 2</code> 对 <code>a</code> 的引用是一个 <code>LHS</code> 引用，因为我们并不关心当前 <code>a</code> 的值是什么，只想为 <code>= 2</code> 这个赋值操作找到一个目标</p>\n<p>综上所述，可以将 <code>LHS</code> 理解为“赋值操作的目标是谁”，将 <code>RHS</code> 理解为“谁是操作赋值的源头”。也就是说 <code>LHS</code> 是<strong>赋值操作</strong>，<code>RHS</code> 是<strong>寻值操作</strong></p>\n<p>下面的代码既包含 <code>LHS</code> 也包含 <code>RHS</code>：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre>\n<p>首先 <code>foo(2)</code> 的函数调用需要对 foo 进行 <code>RHS</code> 引用，也就是去寻找 foo 的值。找 foo 的值后函数开始执行，当 <code>2</code> 被当作参数传递给 <code>foo(...)</code> 时，<code>2</code> 被赋值给了参数 <code>a</code>，因此需要进行 <code>LHS</code> 查询。这里还有对 <code>a</code> 进行的 <code>RHS</code> 引用，并将得到值传给了 <code>console.log(...)</code>。而 <code>console.log(...)</code> 本身也需要一个引用才能执行，因此会对 <code>console</code> 对象进行 <code>RHS</code> 查询，并检查得到的值是否有一个叫 <code>log</code> 的方法。最后，假设 <code>log(...)</code> 函数可以接收参数，则在将 <code>2</code> 赋值给其第一个参数前，这个参数需要进行一次 <code>LHS</code> 引用查询。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220411105712261.png" alt="image-20220411105712261"></p>\n<h3>作用域嵌套</h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>上述代码中，对 <code>b</code> 进行的 <code>RHS</code> 引用无法在函数 <code>foo</code> 内部完成，但可以在上一级作用域中完成。遍历嵌套作用域链的规则很简单：引擎会从当前的<strong>执行作用域</strong>开始查找变量，如果找不到，就去上一级继续查找。当抵达最外层的<strong>全局作用域</strong>时，无论找到还是没找到，查找过程都会停止。</p>\n<h3>异常</h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n    b <span class="token operator">=</span> a\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: b is not defined </span>\n</code></pre>\n<p><code>console.log(a + b)</code> 时，对 b 进行 RHS 查询是无法找到该变量的，因为它未声明，引擎会抛出 <code>ReferenceError</code> 异常。</p>\n<p>但如果执行的是 LHS 查询，且程序运行在“非严格模式”下，如果在全局作用域中也无法找到目标变量，则会在全局作用域下隐式地创建一个具有该名称的变量，并将其返回给引擎，比如下面的代码是可以正常运行的：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    b <span class="token operator">=</span> a\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>但如果是“严格模式”下运行程序，则也会抛出 <code>ReferenceError</code> 异常：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">\'use strict\'</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    b <span class="token operator">=</span> a\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: b is not defined</span>\n</code></pre>\n<p>如果 RHS 查询找到了一个变量，但你尝试对这个变量的值进行不合理的操作，比如试图对一个字符串的值进行函数调用，那么引擎会抛出 <code>TypeError</code> 异常。</p>\n'}},368:function(n,t){n.exports={attributes:{title:"Windows 系统下搭建 Flutter 环境并运行 Flutter 项目",date:"2022/04/12 14:12:40",updated:"2022/04/12 14:12:40",categories:["技术"],tags:["Flutter"]},html:'<p>组长昨天说今年可能会尝试使用 Flutter 开发一个项目，听到这个消息后我急急忙忙地开卷，毕竟技多不压身。下面简单介绍一下 Windows 系统如何搭建 Flutter 运行环境。</p>\n<h2>获取 Flutter SDK</h2>\n<p>这里有两种方式获取 SDK，一种是直接下载安装压缩包，另一种是通过 git 来获取源码。我选择了前者，因为会省事不少。</p>\n<p>下载地址在<a href="https://docs.flutter.dev/get-started/install/windows">官网</a>可以找到。</p>\n<p>下载好安装包之后，找一个自己喜欢的目录解压，官方建议最好找一个不需要特殊权限的文件夹进行解压，同时路径里不要包含特殊符号或者空格。这里我选择解压到 <code>D:\\flutter</code>，后续的所有操作也以这个路径为准。</p>\n<h2>配置环境变量</h2>\n<p>首先打开环境变量配置，找到系统变量里的 <code>Path</code> 并进行编辑操作</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412110205943.png" alt="image-20220412110205943"></p>\n<p>然后点击新建，把自己 <code>flutter\\bin</code> 所在的完整路径填进去，最后点击确定。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412110337670.png" alt="image-20220412110337670"></p>\n<p>完成环境变量的配置，可以打开命令行工具，输入 <code>flutter --version</code> 来检查是否配置成功。由于我们下载的 SDK 里面已经包含了 Dart，所以输入 <code>dart --version</code> 也会出现 dart 的版本信息。</p>\n<h2>依赖检查</h2>\n<p>在命令行中运行 <code>flutter doctor</code> 可以自动检查我们的依赖是否有缺失。第一次运行时 flutter 会下载一些东西，所以运行时间可能比较长，耐心等待就可以。运行结果大概长这样：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412111026121.png" alt="image-20220412111026121"></p>\n<p>每个人的检查结果可能都不相同，根据检查的提示自行安装即可。</p>\n<p><strong>注意</strong>：如果你不需要开发桌面端应用的话，Visual Studio 是不需要安装的。</p>\n<h2>Android Studio 配置</h2>\n<p>如果你之前没有安装过 Android Studio，那么上面的检查可能会有很多不通过的地方。下面简单介绍 Android Studio 的配置流程。</p>\n<h3>安装</h3>\n<p>首先去<a href="https://developer.android.com/studio">官网</a>下载安装包并安装，具体安装过程可以自行搜索，需要额外配置 JAVA 环境之类的。</p>\n<p>安装完之后，第一次打开时会有一个引导流程，由于我已经安装过了，所以没有办法截图。只需要记得安装这几样东西：<code>Android SDK</code>，<code>Android SDK Command-line Tools</code>，<code>Android SDK Build-Tools</code>。</p>\n<p>将 Android Studio 初始化完之后，打开命令行工具，输入 <code>flutter config --android-studio-dir D:\\software\\AndroidStudio</code> 来配置 Android Studio 的安装路径。你需要把路径替换为自己的实际安装路径，并且路径里<strong>不要有空格</strong>。</p>\n<p>这时候再次运行 <code>flutter doctor</code> 应该就可以发现很多依赖项不再爆红了。</p>\n<h3>安装 Android 虚拟机</h3>\n<blockquote>\n<p>这里我略过了真机调试，选择了虚拟机调试，如果有真机调试的需求可以去官方文档自行配置。</p>\n</blockquote>\n<p>首先打开 Android Studio 中的 AVD Manager</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412115153991.png" alt="image-20220412115153991"></p>\n<p>创建一个新的虚拟机</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412115219412.png" alt="image-20220412115219412"></p>\n<p>选择一个喜欢的机型，然后点击 Next</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412115249842.png" alt="image-20220412115249842"></p>\n<p>选择一个系统镜像，这里我选择的是最新的 Android 12，选择自己需要的版本即可。如果选择了没有安装过的镜像则需要下载，下载速度可能比较慢，耐心等待即可。安装完成后点击 Next</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412115458335.png" alt="image-20220412115458335"></p>\n<p>这里配置页面需要选择硬件加速，选择 <code>Hardware - GLES 2.0</code> ，然后点击 Finish 即可。**注意：**如果这一选项不可选择，那么可以尝试换一个机型或系统镜像。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412133437865.png" alt="image-20220412133437865"></p>\n<p>最后，打开命令行输入 <code>flutter doctor --android-licenses</code>，一路同意就完事了。</p>\n<p>这时候我们再次输入 <code>flutter doctor</code> 应该就可以发现除了 Visual Studio 外其他的依赖都已经安装完成了。</p>\n<h3>新建一个 Flutter 项目并运行</h3>\n<p>为了能运行 Flutter 项目，我们需要在 Android Studio 的 Plugins 界面中安装两个插件：Flutter 和 Dart，安装完成后重启 IDE 即可。</p>\n<p>重启后我们可以看到一个新的按钮： <code>New Flutter Project</code></p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412134128350.png" alt="image-20220412134128350"></p>\n<p>点进去之后会让我们先配置 flutter 目录，选择完目录后点击 Next</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412134214170.png" alt="image-20220412134214170"></p>\n<p>接着就是项目的一些信息填写。需要注意的是，项目的存放位置不要使用 <code>-</code> 或者空格，因为 dart 不支持。所以我们需要使用下划线来分隔单词。下面的 <code>Organization</code> 是填写公司的域名，在应用发布时，它会和项目名称一起作为 Android 的包名。应用发布后包名将无法修改，不过如果不发布的话这一项随便填一下就可以。填完这些信息之后点击 Finish 就可以完成项目创建。</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412134450089.png" alt="image-20220412134450089"></p>\n<p>打开刚刚创建好的项目，首先选择我们之前在 AVD Manager 配置的虚拟机，然后选择好运行的 main 文件，点击运行就可以跑起来项目啦</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412135646713.png" alt="image-20220412135646713"></p>\n<p>但是众所周知，有些网站在国内的访问速度是很慢的，所以很有可能你会卡在这一步：</p>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412135821050.png" alt="image-20220412135821050"></p>\n<p>原因是项目默认的 Gradle 的 Maven 仓库我们访问不到，所以我们需要把仓库地址配置为国内镜像源。步骤如下：</p>\n<ol>\n<li>\n<p>修改项目目录下的 <code>android/build.gradle</code> 文件内的仓库地址为</p>\n<pre class="language-js"><code class="language-js">maven <span class="token punctuation">{</span> url <span class="token string">\'https://maven.aliyun.com/repository/google\'</span> <span class="token punctuation">}</span>\nmaven <span class="token punctuation">{</span> url <span class="token string">\'https://maven.aliyun.com/repository/jcenter\'</span> <span class="token punctuation">}</span>\nmaven <span class="token punctuation">{</span> url <span class="token string">\'http://maven.aliyun.com/nexus/content/groups/public\'</span> <span class="token punctuation">}</span>\n</code></pre>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220412140306626.png" alt="image-20220412140306626"></p>\n</li>\n<li>\n<p>修改 flutter SDK目录下的 <code>flutter\\packages\\flutter_tools\\gradle\\flutter.gradle</code> 和 <code>flutter\\packages\\flutter_tools\\gradle\\resolve_dependencies.gradle</code>，同样也是修改仓库地址。</p>\n</li>\n</ol>\n<p>修改完成后，我们重启 IDE 就可以发现项目可以正常运行啦</p>\n<blockquote>\n<p>至此，我们已经可以正常地进行 Flutter 项目跨 Android 平台的开发了。最近开始慢慢学习 Flutter 和 Dart了，身上的担子越来越多，但我还是一如既往的懒。希望自己能坚持下去吧。</p>\n</blockquote>\n'}},369:function(n,t){n.exports={attributes:{title:"在 Dart 中 final 和 const 的不同点",date:"2022/04/18 23:01:40",updated:"2022/04/18 23:01:40",categories:["技术"],tags:["Dart"]},html:'<p>学习 dart 的时候对两个关键字的使用比较迷惑，一个是 <code>final</code>，一个是 <code>const</code>。查阅了一些资料后决定做一些简单的总结。</p>\n<h2>共同点</h2>\n<p><code>final</code> 和 <code>const</code> 都是用来定义常量的关键字，它们有以下共同点：</p>\n<ul>\n<li>可以省略声明的类型</li>\n<li>初始化之后不可再次赋值</li>\n<li>不能和 <code>var</code> 同时使用</li>\n</ul>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// 会直接在 IDE 中就报红</span>\na <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre>\n<h2>不同点</h2>\n<ol>\n<li>\n<p>虽然 <code>final</code> 和 <code>const</code> 定义的常量在初始化后就不可以再被修改，但还是有细微的不同。常量的实质是指针不可修改，但是 <code>final</code> 定义的常量的“值”可以被修改，因为它只限定了指针不可修改，但并没有限定指针所指向的值不能修改。但是 <code>const</code> 定义的常量是真的不能修改。</p>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3]</span>\n\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Unsupported operation: Cannot modify an unmodifiable list</span>\n</code></pre>\n</li>\n<li>\n<p>使用 <code>const</code> 多次定义一个常量，它们的值其实是一样的。这也算是 dart 做的一种优化。</p>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n</li>\n<li>\n<p><code>const</code> 不仅可以定义变量（variable），还可以定义值（value）。也就是可以写在等号右边。而 <code>final</code> 则不可以。</p>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// Unsupported operation: Cannot modify an unmodifiable list</span>\n\n<span class="token comment">// 虽然常量值不可以修改，但是被赋予常量值的变量的值是可以修改的。</span>\na <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [3, 4]</span>\n</code></pre>\n</li>\n<li>\n<p><code>const</code> 是编译时常量，必须在编译时就有一个确定的值。而 <code>final</code> 是运行时常量，他会在第一次使用时被初始化赋值。</p>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// IDE 会报红</span>\n\n<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IDE 会报红</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n\n<span class="token keyword">final</span> z <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre>\n</li>\n<li>\n<p>修饰常量构造函数时必须使用 <code>const</code></p>\n<pre class="language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token class-name">ConstObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  a<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConstObject</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用常量构造函数时要用 final 修饰类的成员</span>\n  <span class="token keyword">final</span> value<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token class-name">ConstObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n</ol>\n<p>纸上得来终觉浅。还是需要多敲几遍才能记得深刻~</p>\n'}},370:function(n,t){n.exports={attributes:{title:"关于我摆烂的这些日子",date:"2022/05/02 23:44:44",updated:"2022/05/02 23:44:44",categories:["随笔"],tags:["强说愁"]},html:"<p>自从上次发博客（2022.4.18）以后，我进入了一段持续摆烂的日子。即使是写文章的此时此刻，我依旧怀着一种摆烂的心态。</p>\n<p><strong>我为什么开始摆烂了？</strong> 每当到了夜里，我都会问自己这个问题。我给出的答案有很多，甚至多到我能说服自己这段时间的摆烂是种很正常的现象。</p>\n<p><strong>我在欺骗自己。</strong></p>\n<p>我觉得首先应该给<code>摆烂</code>一个大体上的定义。所谓摆烂，其实就是一种综合了<code>拖延</code>，<code>懒惰</code>，<code>自暴自弃</code>等多种负面行为的行为模式。在我身上则具体表现为以下几种形式：</p>\n<ul>\n<li>每个休息日的早上，尽管醒得很早，但是会一直躺在床上刷手机，甚至懒得起来喝一口水，会一直磨蹭到十一点左右才正式起床。</li>\n<li>工作日下班后，回到家先躺在床上刷手机，到七点左右的时候开始考虑要不要学习，然后会告诉自己：你已经工作一整天了，奖励自己玩几局游戏吧。于是乎，就会打一晚上游戏。</li>\n<li>每次玩游戏时都有负罪感，但还是会去玩。甚至玩得很开心。</li>\n<li>毕设一直卡在某一步进行不下去了，一边担心自己能不能正常毕业，一边心惊胆战地开了局游戏。</li>\n<li>每当想要学习时，都会想着要不要先打一局游戏。结果就是打完一局还想再打一局，最后打了一晚上游戏。</li>\n<li>每天都对自己的未来抱有焦虑，每天都会“吾日三省吾身”，每天都没有好的改变发生。</li>\n</ul>\n<p>以上的描述是我近半个月来的真实写照，当我敲出上面的字时，我的心其实还是有些麻木的。这不是什么好兆头。</p>\n<p><strong>一个有着清醒头脑却自甘堕落的人，何其不幸。</strong></p>\n<p>写出来这些东西可能并不会对我自己有什么实质性的帮助，明天的我或许依然是如此的颓废，但是写出来总比憋在心里好。我没有可以倾诉的对象，没人知道我在做什么、想什么。如果明天我的生命猝然结束，起码也要留下一些 <strong>“真实的我”</strong>。</p>\n<p>我总是想的太多，做的太少。或许是我在自作多情：理想主义和完美主义，两个看似正面的词汇却成为了我难以承受的重担。</p>\n<p>我很累，但是我知道有人比我还累，这也是我暂时不能离开这个世界的原因。我会坚强且痛苦地活下去，直到我成为那个承受最多的人。</p>\n"}}}]);