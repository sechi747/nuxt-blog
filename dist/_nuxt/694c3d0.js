(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{377:function(n,t){n.exports={attributes:{title:"执行上下文和执行栈",date:"2022/04/14 17:31:40",updated:"2022/04/14 17:31:40",categories:["技术"],tags:["Vanilla JS"]},html:'<p>其实这篇文章更像是个读书笔记，只不过掺杂了一点点个人理解。文章讨论的东西并不深入，但单纯用来理解概念也还够用。虽然实际开发中不会用到这些概念，但是可以为后面理解闭包等概念铺路。</p>\n<h1>执行上下文的概念</h1>\n<p>简而言之，执行上下文（Execution Context）是评估和执行 JavaScript 代码的环境的抽象概念。每当 JavaScript 代码在运行的时候，它都是在执行上下文中运行。它有三种类型：</p>\n<ul>\n<li>全局执行上下文：这是基础的上下文，任何不再函数内部的代码都在全局上下文中。它会执行两件事：① 创建一个全局的 <code>Window</code> 对象。② 设置 <code>this</code> 的值等于这个全局对象。一个程序只能有一个全局上下文。</li>\n<li>函数执行上下文：每当函数被调用时都会给这个函数创建一个新的上下文。每个函数都有自己的执行上下文，它会在函数<strong>被调用时</strong>创建而不是被定义时创建。</li>\n<li>Eval 函数执行上下文：执行在 <code>eval</code> 函数内部的代码也会有属于自己的执行上下文。</li>\n</ul>\n<h1>执行栈的概念</h1>\n<p>执行栈（Execution Stack），在其它编程语言中也会被称为“调用栈”，是一种拥有 LIFO（Last In First Out）数据结构的栈，被用来存储代码运行时创建的所有<strong>执行上下文</strong>。</p>\n<p>在 JS 引擎执行代码时，它会首先创建一个全局执行上下文并压入执行栈。每当调用一个函数时，它就会为该函数创建一个新的执行上下文并压入栈底。</p>\n<p>JS 引擎会执行那些上下文位于栈顶的函数，当该函数执行完毕时，执行上下文会从栈中弹出，然后会再次重复上述动作，直到所有函数执行完毕。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">\'Hello World!\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Inside first function\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Again inside first function\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Inside second function\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Inside Global Execution Context\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><img src="https://pic-go-20220331-1301395896.cos.ap-beijing.myqcloud.com/img/image-20220414155143708.png" alt="image-20220414155143708"></p>\n<h1>执行上下文是怎么被创建的？</h1>\n<p>创建执行上下文有两个阶段：① <strong>创建阶段</strong> ② <strong>执行阶段</strong></p>\n<h2>创建阶段</h2>\n<p>执行上下文在创建阶段会发生两件事：</p>\n<ul>\n<li><strong>词法环境</strong>组件被创建</li>\n<li><strong>变量环境</strong>组件被创建</li>\n</ul>\n<p>在概念上可以表现为以下代码：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">ExecutionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">LexicalEnvironment</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> <span class="token property-access">to</span> <span class="token maybe-class-name">LexicalEnvironment</span> <span class="token keyword">in</span> memory<span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token maybe-class-name">VariableEnvironment</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> <span class="token property-access">to</span> <span class="token maybe-class-name">VariableEnvironment</span> <span class="token keyword">in</span>  memory<span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3>词法环境</h3>\n<p>ES6 的文档中把词法环境定义为：</p>\n<blockquote>\n<p><strong>词法环境</strong>是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义<strong>标识符</strong>和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用<strong>外部</strong>词法环境的空值组成。</p>\n</blockquote>\n<p>简单来讲<strong>词法环境</strong>是一种持有<strong>标识符——变量映射</strong>的结构。<strong>标识符</strong>就是指变量/函数的名字，而<strong>变量</strong>则是对实际对象（也包括函数和数组）或原始数据的引用。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面的代码的词法环境大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">LexicalEnvironment</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> <span class="token property-access">to</span> foo <span class="token keyword">function</span><span class="token operator">></span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>每个词法环境有三个组件：</p>\n<ul>\n<li>环境记录器</li>\n<li>外部环境的引用</li>\n<li><code>this</code> 绑定</li>\n</ul>\n<h4>环境记录器</h4>\n<p>环境记录器是词法环境内部<strong>存储变量和函数声明</strong>的地方。</p>\n<p>环境记录器具有两种类型：</p>\n<ul>\n<li><strong>声明式环境记录器</strong>——函数的词法环境会包含一个声明式环境记录器。用来存储变量和函数声明。</li>\n<li><strong>对象环境记录器</strong>——全局代码的词法环境会包含一个对象环境记录器。除了变量和函数声明，对象环境记录器还会存储一个全局绑定对象（在浏览器中也就是 Window 对象）。所以对于每个绑定对象的属性（如果是在浏览器中，会包含一些浏览器提供的属性和方法，如BOM等）都会在记录器中创建一个新的条目（原文是 entry，不知道该怎么翻译）。</li>\n</ul>\n<p>注意：对于函数代码，环境记录器还会包含一个<strong>参数（arguments）对象</strong>，它包含了传递给该函数的“<strong>索引--参数映射</strong>”以及<strong>参数的长度</strong>。例如下面的函数的参数对象大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// argument object</span>\n<span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>简而言之，</p>\n<ul>\n<li>在<strong>全局环境</strong>中，环境记录器是对象环境记录器。</li>\n<li>在<strong>函数环境</strong>中，环境记录器是声明式环境记录器。</li>\n</ul>\n<h4>外部环境的引用</h4>\n<p>外部环境的引用意味着一个词法环境可以访问到它外部的词法环境。也就是说如果 JS 引擎在当前的词法环境中无法找到一个变量，那么它可以去外部的词法环境中继续查找。我个人的理解是，这其实和作用域链很像，如果在当前作用域找不到一个变量的定义，那么会一层一层地向上查找，直到全局作用域。</p>\n<h4>this 绑定</h4>\n<p>这个组件就是用来进行 <code>this</code> 绑定的。</p>\n<p>如果是全局执行上下文的话， <code>this</code> 会指向全局对象。（在浏览器中也就是 Window 对象）</p>\n<p>如果是函数执行上下文的话，<code>this</code> 的值会取决于函数是如何被调用的（此处不包含<strong>箭头函数</strong>，箭头函数的 <code>this</code> 指向取决于函数是在哪里被定义的）。如果它是被一个引用对象调用，那么 <code>this</code> 会被设置为那个对象，否则 <code>this</code> 的值会被设置为全局对象。（严格模式下则是 <code>undefined</code>）以下面代码为例：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'peter\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">birthYear</span><span class="token operator">:</span> <span class="token number">1994</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">calcAge</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">2018</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">birthYear</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">calcAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// \'this\' refers to \'person\', because \'calcAge\' was called with \'person\' object reference</span>\n<span class="token keyword">const</span> calculateAge <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token property-access">calcAge</span><span class="token punctuation">;</span>\n<span class="token function">calculateAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// \'this\' refers to the global window object, because no object reference was given</span>\n</code></pre>\n<p>抽象地讲，词法环境的伪代码大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">GlobalExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword null nil">null</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token operator">:</span> <span class="token operator">&lt;</span>global object<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token maybe-class-name">FunctionExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> or outer <span class="token keyword">function</span> environment reference<span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token operator">:</span> <span class="token operator">&lt;</span>depends on how <span class="token keyword">function</span> is called<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3>变量环境</h3>\n<p>变量环境其实也是一个词法环境，它的环境记录器持有<strong>变量声明语句</strong>在执行上下文中创建的绑定关系。</p>\n<p>所以变量环境有着词法环境的所有属性和组件。</p>\n<p>在 ES6 中，词法环境和变量环境的唯一区别就是：词法环境会存储所有由 <code>let</code> 和 <code>const</code> 定义的变量绑定和函数声明。而变量环境只存储由 <code>var</code> 定义的变量绑定。</p>\n<h2>执行阶段</h2>\n<p>在执行阶段，完成对所有这些变量的分配后并最终执行代码。</p>\n<h2>例子</h2>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n <span class="token keyword control-flow">return</span> e <span class="token operator">*</span> f <span class="token operator">*</span> g<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nc <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>当上面的代码被执行时，JS 引擎会创建一个全局执行上下文来执行全局代码。在创建阶段时全局执行上下文大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">GlobalExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">multiply</span><span class="token operator">:</span> <span class="token operator">&lt;</span> func <span class="token operator">></span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword null nil">null</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span><span class="token operator">></span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword null nil">null</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在执行阶段时全局执行上下文大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">GlobalExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">multiply</span><span class="token operator">:</span> <span class="token operator">&lt;</span> func <span class="token operator">></span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword null nil">null</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span><span class="token operator">></span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword null nil">null</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>当代码执行到 <code>multiply(20, 30)</code> 时，JS 引擎会创建一个新的函数执行上下文来执行该函数。在创建阶段这个函数执行上下文大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">FunctionExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">GlobalLexicalEnvironment</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span> or <span class="token keyword nil">undefined</span><span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">GlobalLexicalEnvironment</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span> or <span class="token keyword nil">undefined</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>完成创建阶段之后，函数执行上下文进入执行阶段，也就是说对函数内部的变量的赋值操作已经完成，所以在执行阶段该函数执行上下文大概长这样：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">FunctionExectionContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">GlobalLexicalEnvironment</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span> or <span class="token keyword nil">undefined</span><span class="token operator">></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>\n      <span class="token comment">// Identifier bindings go here</span>\n      <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">20</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">GlobalLexicalEnvironment</span><span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Global</span> <span class="token known-class-name class-name">Object</span> or <span class="token keyword nil">undefined</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在这个函数执行完之后，函数的返回值被存储到了 <code>c</code> 中，对应地全局词法环境中的 <code>c</code> 的值也被更新了。至此，全局代码被全部运行，这段程序也就结束了。</p>\n<p>**注意：**在上面的词法环境伪代码中，<code>let</code> 和 <code>const</code> 定义的变量在创建阶段都是 <code>&lt; uninitialized &gt;</code> ，而 <code>var</code> 定义的变量则被赋予了 <code>undefined</code>。这是因为在创建阶段，JS 引擎会检查代码中的变量和函数的声明。函数声明会被完整地存储在环境中，而变量则会被设置为 <code>undefined</code> （使用 <code>var</code> 定义）或者保持未初始化状态（使用 <code>let</code> 和 <code>const</code> 定义）。</p>\n<p>这也就是为什么我们可以在声明之前访问到 <code>var</code> 定义的变量，但当我们尝试在声明之前访问 <code>let</code> 和 <code>const</code> 变量时会得到一个 <code>ReferenceError</code>。</p>\n<h1>参考文章</h1>\n<p><a href="https://juejin.cn/post/6844903682283143181">[译] 理解 JavaScript 中的执行上下文和执行栈</a> 以及它的原文 <a href="https://medium.com/bitsrc/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0">Understanding Execution Context and Execution Stack in Javascript</a></p>\n'}}}]);